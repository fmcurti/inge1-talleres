

----STARTUP---- (29 October 2020 16:57:49) as C:\Users\Felip\Desktop\Dev\Inge 1\ST\windows64\CuisUniversity-4383.image!


!classRemoval: #GameOfLife stamp: 'FC 10/29/2020 17:26:50'!
Object subclass: #GameOfLife
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'GameOfLife'!

!classRemoval: #GameOfLifeTest stamp: 'FC 10/29/2020 17:26:50'!
TestCase subclass: #GameOfLifeTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'GameOfLife'!

TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'FC 10/29/2020 17:33:18'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FC 10/29/2020 17:35:04'!
Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliTest methodsFor: 'no messages' stamp: 'FC 10/29/2020 17:34:55'!
test01
	| game |
	game := TerniLapilli new.
	
	self assert: game isPlayingX.
	! !

!testRun: #TerniLapilliTest #test01 stamp: 'FC 10/29/2020 17:35:18'!
ERROR!

!testRun: #TerniLapilliTest #test01 stamp: 'FC 10/29/2020 17:35:18'!
ERROR!

!testRun: #TerniLapilliTest #test01 stamp: 'FC 10/29/2020 17:35:31'!
ERROR!

!testRun: #TerniLapilliTest #test01 stamp: 'FC 10/29/2020 17:35:31'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 17:35:43'!
isPlayingX
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 17:35:48' prior: 50901838!
isPlayingX
	^true.! !

!testRun: #TerniLapilliTest #test01 stamp: 'FC 10/29/2020 17:35:50'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'FC 10/29/2020 17:35:52'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 17:37:05'!
test02
	| game |
	game := TerniLapilli new.
	
	game putXAt: 2@2.
	
	self assert: game isPlayingO.
	! !

!testRun: #TerniLapilliTest #test02 stamp: 'FC 10/29/2020 17:37:17'!
ERROR!

!testRun: #TerniLapilliTest #test02 stamp: 'FC 10/29/2020 17:37:17'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 17:37:34'!
putXAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 17:37:40' prior: 50901862!
putXAt: aPoint 
	! !

!testRun: #TerniLapilliTest #test02 stamp: 'FC 10/29/2020 17:37:41'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 17:37:48'!
isPlayingO
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 17:37:53' prior: 50901873!
isPlayingO
	^true.! !

!testRun: #TerniLapilliTest #test02 stamp: 'FC 10/29/2020 17:37:55'!
PASSED!

!testRun: #TerniLapilliTest #test02 stamp: 'FC 10/29/2020 17:37:57'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'FC 10/29/2020 17:37:57'!
PASSED!

!testRun: #TerniLapilliTest #test02 stamp: 'FC 10/29/2020 17:37:57'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 17:38:49' prior: 50901851!
test02
	| game |
	game := TerniLapilli new.
	
	game putXAt: 2@2.
	
	self assert: game isPlayingO.
	self deny: game isPlayingX.! !

!testRun: #TerniLapilliTest #test02 stamp: 'FC 10/29/2020 17:38:50'!
FAILURE!

Object subclass: #TerniLapilli
	instanceVariableNames: 'currentTurn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FC 10/29/2020 17:38:59'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentTurn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 17:39:12' prior: 50901867!
putXAt: aPoint 
	currentTurn := #O! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 17:39:30' overrides: 16896425!
initialize 
	currentTurn := #X.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 17:39:50' prior: 50901877!
isPlayingO
	^currentTurn = #O.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 17:40:00' prior: 50901842!
isPlayingX
	^currentTurn = #X.! !

!testRun: #TerniLapilliTest #test01 stamp: 'FC 10/29/2020 17:40:02'!
PASSED!

!testRun: #TerniLapilliTest #test02 stamp: 'FC 10/29/2020 17:40:02'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'FC 10/29/2020 17:40:05'!
PASSED!

!testRun: #TerniLapilliTest #test02 stamp: 'FC 10/29/2020 17:40:05'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 17:41:51'!
test03
	| game |
	game := TerniLapilli new.
	
	game putOAt: 2@2.
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 17:42:17' prior: 50901938!
test03
	| game |
	game := TerniLapilli new.
	
	self should: [game putOAt: 2@2] raise: Error.
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 17:43:06' prior: 50901944!
test03
	| game |
	game := TerniLapilli new.
	
	self should: [game putOAt: 2@2] raise: Error description: TerniLapilli invalidMoveMessage.
	
	! !

!testRun: #TerniLapilliTest #test03 stamp: 'FC 10/29/2020 17:43:11'!
ERROR!
!TerniLapilli class methodsFor: 'error' stamp: 'FC 10/29/2020 17:43:20'!
invalidMoveMessage
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error' stamp: 'FC 10/29/2020 17:43:27' prior: 50901961!
invalidMoveMessage
	^'Movete bien gato'.! !

!testRun: #TerniLapilliTest #test03 stamp: 'FC 10/29/2020 17:43:30'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'FC 10/29/2020 17:43:30'!
PASSED!

!testRun: #TerniLapilliTest #test02 stamp: 'FC 10/29/2020 17:43:30'!
PASSED!

!testRun: #TerniLapilliTest #test03 stamp: 'FC 10/29/2020 17:43:30'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 17:43:44' prior: 50901951!
test03
	| game |
	game := TerniLapilli new.
	
	self should: [game putOAt: 2@2] raise: Error description: TerniLapilli invalidMoveMessage.
	
	! !

!testRun: #TerniLapilliTest #test03 stamp: 'FC 10/29/2020 17:43:44'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'FC 10/29/2020 17:43:44'!
PASSED!

!testRun: #TerniLapilliTest #test02 stamp: 'FC 10/29/2020 17:43:44'!
PASSED!

!testRun: #TerniLapilliTest #test03 stamp: 'FC 10/29/2020 17:43:44'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 17:44:17' prior: 50901981!
test03
	| game |
	game := TerniLapilli new.
	
	self should: [game putOAt: 2@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	
! !

!testRun: #TerniLapilliTest #test03 stamp: 'FC 10/29/2020 17:44:18'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 17:45:11'!
putOAt: aPoint 
	

	self error: self class invalidMoveMessage.! !

!testRun: #TerniLapilliTest #test01 stamp: 'FC 10/29/2020 17:45:13'!
PASSED!

!testRun: #TerniLapilliTest #test02 stamp: 'FC 10/29/2020 17:45:13'!
PASSED!

!testRun: #TerniLapilliTest #test03 stamp: 'FC 10/29/2020 17:45:13'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 17:45:59'!
test01PlayerXShouldStart
	| game |
	game := TerniLapilli new.
	
	self assert: game isPlayingX.
	! !

!methodRemoval: TerniLapilliTest #test01 stamp: 'FC 10/29/2020 17:45:59'!
test01
	| game |
	game := TerniLapilli new.
	
	self assert: game isPlayingX.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 17:46:22'!
test02PlayerXShouldEndTurnAfterPlaying
	| game |
	game := TerniLapilli new.
	
	game putXAt: 2@2.
	
	self assert: game isPlayingO.
	self deny: game isPlayingX.! !

!methodRemoval: TerniLapilliTest #test02 stamp: 'FC 10/29/2020 17:46:22'!
test02
	| game |
	game := TerniLapilli new.
	
	game putXAt: 2@2.
	
	self assert: game isPlayingO.
	self deny: game isPlayingX.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 17:46:42'!
test03PlayerOShouldNotBeAbleToPlayAtGameStart
	| game |
	game := TerniLapilli new.
	
	self should: [game putOAt: 2@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	
! !

!methodRemoval: TerniLapilliTest #test03 stamp: 'FC 10/29/2020 17:46:42'!
test03
	| game |
	game := TerniLapilli new.
	
	self should: [game putOAt: 2@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	
!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 17:50:36'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 17:50:36'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 17:50:36'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 17:50:37'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 17:50:37'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 17:50:37'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 17:50:46'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 17:50:46'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 17:50:46'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 17:50:47'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 17:50:47'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 17:50:48'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 18:13:29'!
test04PlayerXShouldGoAfterO
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 2@2.
	
	self assert: game isPlayingX.! !

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 18:13:36'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:14:34' prior: 50902009!
putOAt: aPoint 
	
	self isPlayingO ifTrue: [
		currentTurn  := #X.
	] ifFalse: [
		self error: self class invalidMoveMessage.
	]! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 18:14:36'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 18:14:36'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 18:14:36'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 18:14:36'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 18:15:23'!
test04PlayerXShouldNotBeAbleToPlayWhenIsOsTurn
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putXAt: 2@2.
	
	self assert: game isPlayingX.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 18:15:37' prior: 50902135!
test04PlayerXShouldNotBeAbleToPlayWhenIsOsTurn
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	self should: [game putXAt: 2@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	! !

!testRun: #TerniLapilliTest #test04PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 18:15:38'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:16:04' prior: 50901912!
putXAt: aPoint 
	self isPlayingX ifTrue: [
		currentTurn  := #O.
	] ifFalse: [
		self error: self class invalidMoveMessage.
	]! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 18:16:06'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 18:16:06'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 18:16:06'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 18:16:06'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 18:16:06'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 18:16:29'!
test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	self should: [game putXAt: 2@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	! !

!methodRemoval: TerniLapilliTest #test04PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 18:16:29'!
test04PlayerXShouldNotBeAbleToPlayWhenIsOsTurn
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	self should: [game putXAt: 2@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 18:20:01'!
test06
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	
	self assert: (game isXAt: 1@1).
	! !

!testRun: #TerniLapilliTest #test06 stamp: 'FC 10/29/2020 18:20:03'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 18:20:20'!
isXAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 18:20:31' prior: 50902210!
isXAt: aPoint 
	^true.! !

!testRun: #TerniLapilliTest #test06 stamp: 'FC 10/29/2020 18:20:33'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 18:20:33'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 18:20:33'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 18:20:33'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 18:20:33'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 18:20:33'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'FC 10/29/2020 18:20:33'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'FC 10/29/2020 18:20:34'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 18:20:34'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 18:20:34'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 18:20:34'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 18:20:34'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 18:20:34'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'FC 10/29/2020 18:20:34'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 18:22:02'!
test07
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 2@1
	
	self assert: (game isOAt: 2@1).
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 18:22:10' prior: 50902262!
test07
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 2@1.
	
	self assert: (game isOAt: 2@1).
	! !

!testRun: #TerniLapilliTest #test07 stamp: 'FC 10/29/2020 18:22:11'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:22:18'!
isOAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:22:23' prior: 50902278!
isOAt: aPoint 
	^true.! !

!testRun: #TerniLapilliTest #test07 stamp: 'FC 10/29/2020 18:22:26'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 18:22:26'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 18:22:26'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 18:22:26'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 18:22:26'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 18:22:26'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'FC 10/29/2020 18:22:26'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'FC 10/29/2020 18:22:26'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 18:22:57'!
test08
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1..
	
	self deny: (game isXAt: 2@1).
	! !

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 18:22:58'!
FAILURE!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 18:24:22'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 18:24:22'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 18:24:22'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 18:24:22'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 18:24:22'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 18:24:22'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'FC 10/29/2020 18:24:22'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'FC 10/29/2020 18:24:22'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 18:24:22'!
FAILURE!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 18:24:22'!
FAILURE!

Object subclass: #TerniLapilli
	instanceVariableNames: 'currentTurn xTokens oTokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FC 10/29/2020 18:25:52'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentTurn xTokens oTokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

x _ Set new.			!

x add: 1.!

x add: 1.!

x add: 1.!

x add: 1.!

x add: 1.!

x add: 1.!

x add: 1.!

x add: 1.!

x add: 1.!

x!

x add: 1.!

x add: 1.!

x add: 1.!

x add: 1.!

x add: 1.!

x add: 1.!

x add: 1.!
!TerniLapilli methodsFor: 'initialization' stamp: 'FC 10/29/2020 18:27:55' prior: 50901916 overrides: 16896425!
initialize 
	currentTurn := #X.
	xTokens := OrderedCollection new.
	oTokens := OrderedCollection new.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:28:25' prior: 50902157!
putXAt: aPoint 
	self isPlayingX ifTrue: [
		xTokens add: aPoint.
		currentTurn  := #O.
	] ifFalse: [
		self error: self class invalidMoveMessage.
	]! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:28:55' prior: 50902215!
isXAt: aPoint 
	^xTokens includes: aPoint.! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 18:28:58'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 18:28:58'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 18:28:58'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 18:28:58'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 18:28:58'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'FC 10/29/2020 18:28:58'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'FC 10/29/2020 18:28:58'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 18:28:58'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 18:29:04' prior: 50902311!
test08
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	
	self deny: (game isXAt: 2@1).
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 18:30:03'!
test09
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 2@1.
	
	self deny: (game isOAt: 1@1).
	! !

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 18:30:04'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:30:33' prior: 50902115!
putOAt: aPoint 
	
	self isPlayingO ifTrue: [
		oTokens add: aPoint.
		currentTurn  := #X.
	] ifFalse: [
		self error: self class invalidMoveMessage.
	]! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:30:42' prior: 50902283!
isOAt: aPoint 
	^oTokens includes: aPoint.! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 18:30:44'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 18:30:44'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 18:30:44'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 18:30:44'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 18:30:44'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'FC 10/29/2020 18:30:44'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'FC 10/29/2020 18:30:44'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 18:30:44'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 18:30:44'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 18:32:13'!
test10
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	self should: [game putOAt: 1@1.] raise: Error withMessageError: TerniLapilli invalidMoveMessage. 
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 18:32:25' prior: 50902466!
test10
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	self should: [game putOAt: 1@1.] raise: Error withMessageText: TerniLapilli invalidMoveMessage. 
	! !

!testRun: #TerniLapilliTest #test10 stamp: 'FC 10/29/2020 18:32:26'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:33:11' prior: 50902375!
putXAt: aPoint 
	self isPlayingX ifTrue: [
		self cellIsOccupied: aPoint ifTrue: [ 		self error: self class invalidMoveMessage. ]
		xTokens add: aPoint.
		currentTurn  := #O.
	] ifFalse: [
		self error: self class invalidMoveMessage.
	]! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 18:33:13'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 18:33:13'!
ERROR!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 18:33:13'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 18:33:13'!
ERROR!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 18:33:13'!
ERROR!

!testRun: #TerniLapilliTest #test06 stamp: 'FC 10/29/2020 18:33:13'!
ERROR!

!testRun: #TerniLapilliTest #test07 stamp: 'FC 10/29/2020 18:33:13'!
ERROR!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 18:33:13'!
ERROR!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 18:33:13'!
ERROR!

!testRun: #TerniLapilliTest #test10 stamp: 'FC 10/29/2020 18:33:13'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:33:18' prior: 50902486!
putXAt: aPoint 
	self isPlayingX ifTrue: [
		self cellIsOccupied: aPoint ifTrue: [ 		self error: self class invalidMoveMessage. ].
		xTokens add: aPoint.
		currentTurn  := #O.
	] ifFalse: [
		self error: self class invalidMoveMessage.
	]! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 18:33:18'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 18:33:18'!
ERROR!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 18:33:18'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 18:33:18'!
ERROR!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 18:33:18'!
ERROR!

!testRun: #TerniLapilliTest #test06 stamp: 'FC 10/29/2020 18:33:18'!
ERROR!

!testRun: #TerniLapilliTest #test07 stamp: 'FC 10/29/2020 18:33:18'!
ERROR!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 18:33:18'!
ERROR!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 18:33:18'!
ERROR!

!testRun: #TerniLapilliTest #test10 stamp: 'FC 10/29/2020 18:33:18'!
ERROR!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 18:33:26'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 18:33:26'!
ERROR!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 18:33:26'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 18:33:26'!
ERROR!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 18:33:26'!
ERROR!

!testRun: #TerniLapilliTest #test06 stamp: 'FC 10/29/2020 18:33:26'!
ERROR!

!testRun: #TerniLapilliTest #test07 stamp: 'FC 10/29/2020 18:33:26'!
ERROR!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 18:33:26'!
ERROR!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 18:33:26'!
ERROR!

!testRun: #TerniLapilliTest #test10 stamp: 'FC 10/29/2020 18:33:26'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:33:41' prior: 50902525!
putXAt: aPoint 
	self isPlayingX ifTrue: [
		(self cellIsOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
		xTokens add: aPoint.
		currentTurn  := #O.
	] ifFalse: [
		self error: self class invalidMoveMessage.
	]! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:34:37'!
cellIsOccupied: aPoint
	^(self isXAt: aPoint) or: [self isOAt: aPoint ]! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 18:34:38'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 18:34:38'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 18:34:38'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 18:34:38'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 18:34:38'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'FC 10/29/2020 18:34:38'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'FC 10/29/2020 18:34:38'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 18:34:38'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 18:34:38'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'FC 10/29/2020 18:34:38'!
FAILURE!

!testRun: #TerniLapilliTest #test10 stamp: 'FC 10/29/2020 18:34:38'!
FAILURE!

!testRun: #TerniLapilliTest #test10 stamp: 'FC 10/29/2020 18:34:48'!
FAILURE!

!testRun: #TerniLapilliTest #test10 stamp: 'FC 10/29/2020 18:34:48'!
FAILURE!

	game putXAt: 1@1.!

	game putXAt: 1@1.!

game putOAt: 1@1.!

game putOAt: 1@1.!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:35:46' prior: 50902593!
putXAt: aPoint 
	self isPlayingX ifTrue: [
		(self cellIsOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
		xTokens add: aPoint.
		currentTurn  := #O.
	] ifFalse: [
		self error: self class invalidMoveMessage.
	]! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:35:55' prior: 50902427!
putOAt: aPoint 
	
	self isPlayingO ifTrue: [
	(	self cellIsOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
		oTokens add: aPoint.
		currentTurn  := #X.
	] ifFalse: [
		self error: self class invalidMoveMessage.
	]! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 18:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 18:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 18:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 18:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 18:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'FC 10/29/2020 18:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'FC 10/29/2020 18:35:56'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 18:35:56'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 18:35:56'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'FC 10/29/2020 18:35:56'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:36:03' prior: 50902659!
putOAt: aPoint 
	self isPlayingO ifTrue: [
	(	self cellIsOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
		oTokens add: aPoint.
		currentTurn  := #X.
	] ifFalse: [
		self error: self class invalidMoveMessage.
	]! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:36:13' prior: 50902699!
putOAt: aPoint 
	self isPlayingO ifTrue: [
		(self cellIsOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
		oTokens add: aPoint.
		currentTurn  := #X.
	] ifFalse: [
		self error: self class invalidMoveMessage.
	]! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 18:40:30'!
test11
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 2@1.
	self should: [game putXAt: 1@1.] raise: Error withMessageText: TerniLapilli invalidMoveMessage. 
	! !

!testRun: #TerniLapilliTest #test11 stamp: 'FC 10/29/2020 18:40:31'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 18:40:31'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 18:40:31'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 18:40:31'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 18:40:31'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 18:40:31'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'FC 10/29/2020 18:40:31'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'FC 10/29/2020 18:40:31'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 18:40:31'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 18:40:31'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'FC 10/29/2020 18:40:31'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'FC 10/29/2020 18:40:31'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 18:43:52'!
test12
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	
	self deny: game isOver.
	! !

!testRun: #TerniLapilliTest #test12 stamp: 'FC 10/29/2020 18:43:53'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:44:02'!
isOver
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:44:07' prior: 50902772!
isOver
	^false.! !

!testRun: #TerniLapilliTest #test12 stamp: 'FC 10/29/2020 18:44:10'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 18:44:10'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 18:44:10'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 18:44:10'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 18:44:10'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 18:44:10'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'FC 10/29/2020 18:44:10'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'FC 10/29/2020 18:44:10'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 18:44:10'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 18:44:10'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'FC 10/29/2020 18:44:10'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'FC 10/29/2020 18:44:10'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'FC 10/29/2020 18:44:10'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 18:44:54'!
test13
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 2@2.
	game putXAt: 1@2.
	game putOAt: 3@3.
	game putXAt: 1@3.
	
	
	self deny: game isOver.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 18:45:13' prior: 50902816!
test13
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 2@2.
	game putXAt: 1@2.
	game putOAt: 3@3.
	game putXAt: 1@3.
	
	self assert: game isOver.
	self assert: game hasPlayerXWon.! !

!testRun: #TerniLapilliTest #test13 stamp: 'FC 10/29/2020 18:45:16'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:45:51' prior: 50902776!
isOver
	^self hasPlayerXWon.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:46:39'!
hasPlayerXWon
	^self xTokens size = 3.! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 18:46:41'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 18:46:41'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 18:46:41'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 18:46:41'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 18:46:41'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'FC 10/29/2020 18:46:41'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'FC 10/29/2020 18:46:42'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 18:46:42'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 18:46:42'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'FC 10/29/2020 18:46:42'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'FC 10/29/2020 18:46:42'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'FC 10/29/2020 18:46:42'!
ERROR!

!testRun: #TerniLapilliTest #test13 stamp: 'FC 10/29/2020 18:46:42'!
ERROR!

!testRun: #TerniLapilliTest #test13 stamp: 'FC 10/29/2020 18:46:50'!
ERROR!

!testRun: #TerniLapilliTest #test13 stamp: 'FC 10/29/2020 18:46:50'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:47:01' prior: 50902841!
hasPlayerXWon
	^xTokens size = 3.! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 18:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 18:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 18:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 18:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 18:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'FC 10/29/2020 18:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'FC 10/29/2020 18:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 18:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 18:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'FC 10/29/2020 18:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'FC 10/29/2020 18:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'FC 10/29/2020 18:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'FC 10/29/2020 18:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 18:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 18:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 18:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 18:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 18:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'FC 10/29/2020 18:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'FC 10/29/2020 18:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 18:47:08'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 18:47:08'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'FC 10/29/2020 18:47:08'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'FC 10/29/2020 18:47:08'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'FC 10/29/2020 18:47:08'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'FC 10/29/2020 18:47:08'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 18:48:20' prior: 50902825!
test13
	| game |
	game := TerniLapilli new.
	
	game putXAt: 3@1.
	game putOAt: 1@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@3.
	game putOAt: 1@3.
	
	self assert: game isOver.
	self assert: game hasPlayerXWon.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 18:48:26' prior: 50902965!
test13
	| game |
	game := TerniLapilli new.
	
	game putXAt: 3@1.
	game putOAt: 1@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@3.
	game putOAt: 1@3.
	
	self assert: game isOver.
	self assert: game hasPlayerOWon.! !

!testRun: #TerniLapilliTest #test13 stamp: 'FC 10/29/2020 18:48:28'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:48:40'!
hasPlayerOWon
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:49:04' prior: 50902988!
hasPlayerOWon
	^ oTokens size = 3.! !

!testRun: #TerniLapilliTest #test13 stamp: 'FC 10/29/2020 18:49:05'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 18:49:05'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 18:49:05'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 18:49:05'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 18:49:06'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 18:49:06'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'FC 10/29/2020 18:49:06'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'FC 10/29/2020 18:49:06'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 18:49:06'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 18:49:06'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'FC 10/29/2020 18:49:06'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'FC 10/29/2020 18:49:06'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'FC 10/29/2020 18:49:06'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'FC 10/29/2020 18:49:06'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'FC 10/29/2020 18:49:08'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 18:49:08'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 18:49:08'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 18:49:08'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 18:49:08'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 18:49:08'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'FC 10/29/2020 18:49:08'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'FC 10/29/2020 18:49:08'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 18:49:08'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 18:49:08'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'FC 10/29/2020 18:49:08'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'FC 10/29/2020 18:49:08'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'FC 10/29/2020 18:49:09'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'FC 10/29/2020 18:49:09'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 18:49:42' prior: 50902976!
test13
	| game |
	game := TerniLapilli new.
	
	game putXAt: 3@1.
	game putOAt: 1@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@3.
	game putOAt: 1@3.
	
	self assert: game isOver.
	self assert: game hasPlayerOWon.
	self deny:   game hasPlayerXWon.! !

!testRun: #TerniLapilliTest #test13 stamp: 'FC 10/29/2020 18:49:43'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:50:12' prior: 50902887!
hasPlayerXWon
	^self hasXWinningRow.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:55:25'!
hasXWinningRow

	^(1 to: 3) do: [ :rowNumber | (self isXAt: rowNumber@1) and: [ (self isXAt: rowNumber@2) and: [ self isXAt: rowNumber@3 ] ] ].! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:55:35' prior: 50903093!
hasXWinningRow

	^(1 to: 3) anySatisfy: [ :rowNumber | (self isXAt: rowNumber@1) and: [ (self isXAt: rowNumber@2) and: [ self isXAt: rowNumber@3 ] ] ].! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 18:55:36'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 18:55:36'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 18:55:36'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 18:55:36'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 18:55:36'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'FC 10/29/2020 18:55:36'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'FC 10/29/2020 18:55:36'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 18:55:36'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 18:55:36'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'FC 10/29/2020 18:55:36'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'FC 10/29/2020 18:55:36'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'FC 10/29/2020 18:55:36'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'FC 10/29/2020 18:55:36'!
FAILURE!

!testRun: #TerniLapilliTest #test13 stamp: 'FC 10/29/2020 18:55:36'!
FAILURE!

!testRun: #TerniLapilliTest #test13 stamp: 'FC 10/29/2020 18:56:26'!
FAILURE!

!testRun: #TerniLapilliTest #test13 stamp: 'FC 10/29/2020 18:56:26'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 18:56:53'!
test14
	| game |
	game := TerniLapilli new.
	
	game putXAt: 3@1.
	game putOAt: 1@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@3.
	game putOAt: 1@3.
	
	self assert: game isOver.
	self assert: game hasPlayerOWon.
	self deny:   game hasPlayerXWon.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 18:48:26' prior: 50903075!
test13
	| game |
	game := TerniLapilli new.
	
	game putXAt: 3@1.
	game putOAt: 1@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@3.
	game putOAt: 1@3.
	
	self assert: game isOver.
	self assert: game hasPlayerOWon.! !

!testRun: #TerniLapilliTest #test13 stamp: 'FC 10/29/2020 18:57:06'!
FAILURE!

!testRun: #TerniLapilliTest #test13 stamp: 'FC 10/29/2020 18:57:06'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 18:48:26' prior: 50903165!
test13
	| game |
	game := TerniLapilli new.
	
	game putXAt: 3@1.
	game putOAt: 1@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@3.
	game putOAt: 1@3.
	
	self assert: game isOver.
	self assert: game hasPlayerOWon.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 18:45:13' prior: 50903181!
test13
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 2@2.
	game putXAt: 1@2.
	game putOAt: 3@3.
	game putXAt: 1@3.
	
	self assert: game isOver.
	self assert: game hasPlayerXWon.! !

!testRun: #TerniLapilliTest #test13 stamp: 'FC 10/29/2020 18:58:10'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 18:58:10'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 18:58:10'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 18:58:10'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 18:58:10'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 18:58:10'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'FC 10/29/2020 18:58:10'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'FC 10/29/2020 18:58:10'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 18:58:10'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 18:58:10'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'FC 10/29/2020 18:58:10'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'FC 10/29/2020 18:58:10'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'FC 10/29/2020 18:58:10'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'FC 10/29/2020 18:58:10'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'FC 10/29/2020 18:58:10'!
FAILURE!

!testRun: #TerniLapilliTest #test14 stamp: 'FC 10/29/2020 18:58:10'!
FAILURE!

!testRun: #TerniLapilliTest #test13 stamp: 'FC 10/29/2020 18:58:15'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'FC 10/29/2020 18:58:22'!
FAILURE!

!testRun: #TerniLapilliTest #test14 stamp: 'FC 10/29/2020 18:58:22'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:58:48' prior: 50902837!
isOver
	^self hasPlayerXWon or: [self hasPlayerOWon].! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'FC 10/29/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'FC 10/29/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'FC 10/29/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'FC 10/29/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'FC 10/29/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'FC 10/29/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'FC 10/29/2020 18:58:49'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:59:27'!
hasOWinningRow

	^(1 to: 3) anySatisfy: [ :rowNumber | (self isOAt: rowNumber@1) and: [ (self isOAt: rowNumber@2) and: [ self isOAt: rowNumber@3 ] ] ].! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 18:59:29'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 18:59:29'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 18:59:29'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 18:59:29'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 18:59:29'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'FC 10/29/2020 18:59:29'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'FC 10/29/2020 18:59:29'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 18:59:29'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 18:59:29'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'FC 10/29/2020 18:59:29'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'FC 10/29/2020 18:59:29'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'FC 10/29/2020 18:59:29'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'FC 10/29/2020 18:59:29'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'FC 10/29/2020 18:59:29'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:59:50' prior: 50902993!
hasPlayerOWon
	^ self hasOWinningRow .! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 18:59:51' prior: 50903343!
hasPlayerOWon
	^ self hasOWinningRow.! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 18:59:52'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 18:59:52'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 18:59:52'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 18:59:52'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 18:59:52'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'FC 10/29/2020 18:59:52'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'FC 10/29/2020 18:59:52'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 18:59:52'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 18:59:52'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'FC 10/29/2020 18:59:52'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'FC 10/29/2020 18:59:52'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'FC 10/29/2020 18:59:52'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'FC 10/29/2020 18:59:52'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'FC 10/29/2020 18:59:52'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 19:37:44'!
test06TokenShouldBePlacedOnBoard
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	
	self assert: (game isXAt: 1@1).
	! !

!methodRemoval: TerniLapilliTest #test06 stamp: 'FC 10/29/2020 19:37:44'!
test06
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	
	self assert: (game isXAt: 1@1).
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 19:37:54'!
test06XTokenShouldBePlacedOnBoard
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	
	self assert: (game isXAt: 1@1).
	! !

!methodRemoval: TerniLapilliTest #test06TokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 19:37:54'!
test06TokenShouldBePlacedOnBoard
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	
	self assert: (game isXAt: 1@1).
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 19:38:07'!
test07OTokenShouldBePlacedOnBoard
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 2@1.
	
	self assert: (game isOAt: 2@1).
	! !

!methodRemoval: TerniLapilliTest #test07 stamp: 'FC 10/29/2020 19:38:07'!
test07
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 2@1.
	
	self assert: (game isOAt: 2@1).
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 19:40:10'!
test10OPlayerShouldNotBeAbleToPlaceOnOccupiedCell
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	self should: [game putOAt: 1@1.] raise: Error withMessageText: TerniLapilli invalidMoveMessage. 
	! !

!methodRemoval: TerniLapilliTest #test10 stamp: 'FC 10/29/2020 19:40:10'!
test10
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	self should: [game putOAt: 1@1.] raise: Error withMessageText: TerniLapilli invalidMoveMessage. 
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 19:40:25'!
test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	self should: [game putOAt: 1@1.] raise: Error withMessageText: TerniLapilli invalidMoveMessage. 
	! !

!methodRemoval: TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlaceOnOccupiedCell stamp: 'FC 10/29/2020 19:40:25'!
test10OPlayerShouldNotBeAbleToPlaceOnOccupiedCell
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	self should: [game putOAt: 1@1.] raise: Error withMessageText: TerniLapilli invalidMoveMessage. 
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 19:41:02'!
test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 2@1.
	self should: [game putXAt: 1@1.] raise: Error withMessageText: TerniLapilli invalidMoveMessage. 
	! !

!methodRemoval: TerniLapilliTest #test11 stamp: 'FC 10/29/2020 19:41:02'!
test11
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 2@1.
	self should: [game putXAt: 1@1.] raise: Error withMessageText: TerniLapilli invalidMoveMessage. 
	!

----SNAPSHOT----(29 October 2020 19:41:08) CuisUniversity-4383.image priorSource: 18244304!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 19:41:43'!
test12GameShouldNotBeOverAtStart
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	
	self deny: game isOver.
	! !

!methodRemoval: TerniLapilliTest #test12 stamp: 'FC 10/29/2020 19:41:43'!
test12
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	
	self deny: game isOver.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 19:42:07'!
test13XPlayerShouldWinWhenCompletingARow
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 2@2.
	game putXAt: 1@2.
	game putOAt: 3@3.
	game putXAt: 1@3.
	
	self assert: game isOver.
	self assert: game hasPlayerXWon.! !

!methodRemoval: TerniLapilliTest #test13 stamp: 'FC 10/29/2020 19:42:07'!
test13
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 2@2.
	game putXAt: 1@2.
	game putOAt: 3@3.
	game putXAt: 1@3.
	
	self assert: game isOver.
	self assert: game hasPlayerXWon.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 19:42:27'!
test14OPlayerShouldWinWhenCompletingARow
	| game |
	game := TerniLapilli new.
	
	game putXAt: 3@1.
	game putOAt: 1@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@3.
	game putOAt: 1@3.
	
	self assert: game isOver.
	self assert: game hasPlayerOWon.
	self deny:   game hasPlayerXWon.! !

!methodRemoval: TerniLapilliTest #test14 stamp: 'FC 10/29/2020 19:42:27'!
test14
	| game |
	game := TerniLapilli new.
	
	game putXAt: 3@1.
	game putOAt: 1@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@3.
	game putOAt: 1@3.
	
	self assert: game isOver.
	self assert: game hasPlayerOWon.
	self deny:   game hasPlayerXWon.!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 19:42:30'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 19:42:30'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 19:42:30'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 19:42:30'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 19:42:30'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 19:42:30'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 19:42:30'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 19:42:30'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 19:42:30'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 19:42:30'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 19:42:30'!
PASSED!

!testRun: #TerniLapilliTest #test12GameShouldNotBeOverAtStart stamp: 'FC 10/29/2020 19:42:30'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 19:42:30'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 19:42:30'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 19:42:33'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 19:42:33'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 19:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 19:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 19:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 19:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 19:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 19:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 19:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 19:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 19:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test12GameShouldNotBeOverAtStart stamp: 'FC 10/29/2020 19:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 19:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 19:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 19:42:35'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 19:42:36'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 19:42:36'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 19:42:36'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 19:42:36'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 19:42:36'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 19:42:36'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 19:42:36'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 19:42:36'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 19:42:36'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 19:42:36'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 19:42:36'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 19:42:36'!
PASSED!

!testRun: #TerniLapilliTest #test12GameShouldNotBeOverAtStart stamp: 'FC 10/29/2020 19:42:36'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 19:42:36'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 19:42:36'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 19:42:37'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 19:42:37'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 19:42:37'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 19:42:37'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 19:42:37'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 19:42:37'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 19:42:37'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 19:42:37'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 19:42:37'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 19:42:37'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 19:42:37'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 19:42:37'!
PASSED!

!testRun: #TerniLapilliTest #test12GameShouldNotBeOverAtStart stamp: 'FC 10/29/2020 19:42:37'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 19:42:37'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 19:42:37'!
PASSED!

----SNAPSHOT----(29 October 2020 19:43:04) CuisUniversity-4383.image priorSource: 18298728!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 20:17:21'!
test13GameShouldNotBeOverAtStart
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	
	self deny: game isOver.
	! !

!methodRemoval: TerniLapilliTest #test12GameShouldNotBeOverAtStart stamp: 'FC 10/29/2020 20:17:21'!
test12GameShouldNotBeOverAtStart
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	
	self deny: game isOver.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 20:17:28'!
test14XPlayerShouldWinWhenCompletingARow
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 2@2.
	game putXAt: 1@2.
	game putOAt: 3@3.
	game putXAt: 1@3.
	
	self assert: game isOver.
	self assert: game hasPlayerXWon.! !

!methodRemoval: TerniLapilliTest #test13XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 20:17:28'!
test13XPlayerShouldWinWhenCompletingARow
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 2@2.
	game putXAt: 1@2.
	game putOAt: 3@3.
	game putXAt: 1@3.
	
	self assert: game isOver.
	self assert: game hasPlayerXWon.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 20:17:33'!
test15XPlayerShouldWinWhenCompletingARow
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 2@2.
	game putXAt: 1@2.
	game putOAt: 3@3.
	game putXAt: 1@3.
	
	self assert: game isOver.
	self assert: game hasPlayerXWon.! !

!methodRemoval: TerniLapilliTest #test14XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 20:17:33'!
test14XPlayerShouldWinWhenCompletingARow
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 2@2.
	game putXAt: 1@2.
	game putOAt: 3@3.
	game putXAt: 1@3.
	
	self assert: game isOver.
	self assert: game hasPlayerXWon.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 20:18:39'!
test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell
	| game |
	game := TerniLapilli new.
	
	self should: [game putXAt: 4@1.] raise: Error withMessageText: TerniLapilli outOfBoundsMoveMessage. 
	! !
!TerniLapilli class methodsFor: 'error' stamp: 'FC 10/29/2020 20:19:00'!
outOfBoundsMoveMessage
	^'Movete bien gato'.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 20:19:42' prior: 50902710!
putOAt: aPoint 
	self isPlayingO ifTrue: [
		(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
		(self cellIsOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
		oTokens add: aPoint.
		currentTurn  := #X.
	] ifFalse: [
		self error: self class invalidMoveMessage.
	]! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 20:20:38'!
isValidPosition: aPoint 
	^ (aPoint x between: 1 and: 3) and: [ aPoint y between: 1 and: 3 ]. ! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 20:20:49' prior: 50902648!
putXAt: aPoint 
	self isPlayingX ifTrue: [
		(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
		(self cellIsOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
		xTokens add: aPoint.
		currentTurn  := #O.
	] ifFalse: [
		self error: self class invalidMoveMessage.
	]! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 20:20:50'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 20:20:50'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 20:20:50'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 20:20:50'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 20:20:50'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 20:20:50'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 20:20:50'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 20:20:50'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 20:20:50'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 20:20:50'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 20:20:50'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/29/2020 20:20:50'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/29/2020 20:20:50'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 20:20:50'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 20:20:50'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 20:23:08'!
test16
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 2@2.
	game putXAt: 2@1.
	game putOAt: 3@3.
	game putXAt: 3@1.
	
	self assert: game isOver.
	self assert: game hasPlayerXWon.! !

!testRun: #TerniLapilliTest #test16 stamp: 'FC 10/29/2020 20:23:11'!
FAILURE!

!testRun: #TerniLapilliTest #test16 stamp: 'FC 10/29/2020 20:23:11'!
FAILURE!

!testRun: #TerniLapilliTest #test16 stamp: 'FC 10/29/2020 20:23:43'!
FAILURE!

!testRun: #TerniLapilliTest #test16 stamp: 'FC 10/29/2020 20:23:43'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 20:24:09' prior: 50903089!
hasPlayerXWon
	^self hasXWinningRow or: [self hasXWinningColumn].! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 20:24:30'!
hasXWinningColumn

	^(1 to: 3) anySatisfy: [ :rowNumber | (self isXAt: rowNumber@1) and: [ (self isXAt: rowNumber@2) and: [ self isXAt: rowNumber@3 ] ] ].! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 20:24:38' prior: 50903920!
hasXWinningColumn

	^(1 to: 3) anySatisfy: [ :colNumber | (self isXAt: colNumber@1) and: [ (self isXAt: colNumber@2) and: [ self isXAt: colNumber@3 ] ] ].! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 20:24:54' prior: 50903928!
hasXWinningColumn

	^(1 to: 3) anySatisfy: [ :colNumber | (self isXAt: 1@colNumber) and: [ (self isXAt: 2@colNumber) and: [ self isXAt: 3@colNumber ] ] ].! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 20:24:57'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 20:24:57'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 20:24:57'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 20:24:57'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 20:24:57'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 20:24:57'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 20:24:57'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 20:24:57'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 20:24:57'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 20:24:57'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 20:24:57'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/29/2020 20:24:57'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/29/2020 20:24:57'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 20:24:57'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 20:24:57'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'FC 10/29/2020 20:24:57'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 20:26:11' prior: 50903896!
test16
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 1@1.
	game putXAt: 2@2.
	game putOAt: 2@1.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	self assert: game isOver.
	self assert: game hasPlayerXWon.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 20:26:36' prior: 50903997!
test16
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 1@1.
	game putXAt: 2@2.
	game putOAt: 2@1.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	self assert: game isOver.
	self assert: game hasPlayerOWon.
	self deny:   game hasPlayerXWon.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 20:26:44'!
test17
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 1@1.
	game putXAt: 2@2.
	game putOAt: 2@1.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	self assert: game isOver.
	self assert: game hasPlayerOWon.
	self deny:   game hasPlayerXWon.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 20:23:08' prior: 50904008!
test16
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 2@2.
	game putXAt: 2@1.
	game putOAt: 3@3.
	game putXAt: 3@1.
	
	self assert: game isOver.
	self assert: game hasPlayerXWon.! !

!testRun: #TerniLapilliTest #test16 stamp: 'FC 10/29/2020 20:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'FC 10/29/2020 20:26:55'!
FAILURE!

!testRun: #TerniLapilliTest #test17 stamp: 'FC 10/29/2020 20:26:55'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 20:27:47'!
hasOWinningColumn

	^(1 to: 3) anySatisfy: [ :colNumber | (self isOAt: 1@colNumber) and: [ (self isOAt: 2@colNumber) and: [ self isOAt: 3@colNumber ] ] ].! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 20:28:02' prior: 50903347!
hasPlayerOWon
	^ self hasOWinningRow or: [self hasOWinningColumn ].! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 20:28:04'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 20:28:04'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 20:28:04'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 20:28:04'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 20:28:04'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 20:28:04'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 20:28:04'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 20:28:04'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 20:28:04'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 20:28:04'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 20:28:04'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/29/2020 20:28:04'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/29/2020 20:28:04'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 20:28:04'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 20:28:04'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'FC 10/29/2020 20:28:04'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'FC 10/29/2020 20:28:04'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 20:28:44'!
test18
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 2@2.
	game putOAt: 2@1.
	game putXAt: 3@3.

	
	self assert: game isOver.
	self assert: game hasPlayerOWon.
	self deny:   game hasPlayerXWon.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 20:28:49' prior: 50904115!
test18
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 2@2.
	game putOAt: 2@1.
	game putXAt: 3@3.

	
	self assert: game isOver.
	self assert: game hasPlayerXWon.
	self deny:   game hasPlayerOWon.! !

!testRun: #TerniLapilliTest #test18 stamp: 'FC 10/29/2020 20:28:52'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 20:30:53'!
hasXWinningDiagonal

	^(1 to: 3) allSatisfy: [ :n | self isXAt: n@n  ].! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 20:31:21' prior: 50903915!
hasPlayerXWon
	^self hasXWinningRow or: [self hasXWinningColumn or: [ self hasXWinningDiagonal ]].! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 20:31:26'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 20:31:26'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 20:31:26'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 20:31:26'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 20:31:26'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 20:31:26'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 20:31:26'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 20:31:26'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 20:31:26'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 20:31:26'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 20:31:26'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/29/2020 20:31:26'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/29/2020 20:31:26'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 20:31:26'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 20:31:26'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'FC 10/29/2020 20:31:26'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'FC 10/29/2020 20:31:26'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'FC 10/29/2020 20:31:26'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 20:33:18' prior: 50904139!
hasXWinningDiagonal

	^(1 to: 3) allSatisfy: [ :n | self isXAt: n@n  ] or: [ 
		(self isXAt: 1@3) and: [(self isXAt: 2@2) and: [self isXAt: 3@1] ].
		].! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 20:34:45' prior: 50904208!
hasXWinningDiagonal

	^(1 to: 3) allSatisfy: [ :n | self isXAt: n@n  ] or: [ 
		(1 to: 3) allSatisfy:  [ :n | self isXAt: n@(4-n)]
		].! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 20:34:47'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 20:34:47'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 20:34:47'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 20:34:47'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 20:34:47'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 20:34:47'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 20:34:47'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 20:34:47'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 20:34:47'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 20:34:47'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 20:34:47'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/29/2020 20:34:47'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/29/2020 20:34:47'!
ERROR!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 20:34:47'!
ERROR!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 20:34:47'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'FC 10/29/2020 20:34:47'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'FC 10/29/2020 20:34:47'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'FC 10/29/2020 20:34:47'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 20:35:03' prior: 50904216!
hasXWinningDiagonal

	^((1 to: 3) allSatisfy: [ :n | self isXAt: n@n  ]) or: [ 
		(1 to: 3) allSatisfy:  [ :n | self isXAt: n@(4-n)]
		].! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 20:35:03'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 20:35:03'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 20:35:03'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 20:35:03'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 20:35:03'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 20:35:03'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 20:35:03'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 20:35:03'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 20:35:03'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 20:35:03'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 20:35:03'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/29/2020 20:35:03'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/29/2020 20:35:03'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 20:35:03'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 20:35:03'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'FC 10/29/2020 20:35:03'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'FC 10/29/2020 20:35:04'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'FC 10/29/2020 20:35:04'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 20:35:23'!
hasOWinningDiagonal

	^((1 to: 3) allSatisfy: [ :n | self isOAt: n@n  ]) or: [ 
		(1 to: 3) allSatisfy:  [ :n | self isOAt: n@(4-n)]
		].! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 20:36:02' prior: 50904055!
hasPlayerOWon
	^ self hasOWinningRow or: [self hasOWinningColumn  or: [ self hasOWinningDiagonal ]].! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 20:36:05'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 20:36:05'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 20:36:05'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 20:36:05'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 20:36:05'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 20:36:05'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 20:36:05'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 20:36:05'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 20:36:05'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 20:36:05'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 20:36:05'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/29/2020 20:36:05'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/29/2020 20:36:05'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 20:36:05'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 20:36:05'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'FC 10/29/2020 20:36:05'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'FC 10/29/2020 20:36:05'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'FC 10/29/2020 20:36:05'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 20:36:48'!
test19
	| game |
	game := TerniLapilli new.
	
	game putXAt: 3@1.
	game putOAt: 1@1.
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 2@1.
	game putOAt: 3@3.

	
	self assert: game isOver.
	self assert: game hasPlayerXWon.
	self deny:   game hasPlayerOWon.! !

!testRun: #TerniLapilliTest #test19 stamp: 'FC 10/29/2020 20:36:49'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 20:37:00' prior: 50904417!
test19
	| game |
	game := TerniLapilli new.
	
	game putXAt: 3@1.
	game putOAt: 1@1.
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 2@1.
	game putOAt: 3@3.

	
	self assert: game isOver.
	self assert: game hasPlayerOWon.
	self deny:   game hasPlayerXWon.! !

!testRun: #TerniLapilliTest #test19 stamp: 'FC 10/29/2020 20:37:01'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 20:37:01'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 20:37:01'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 20:37:01'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 20:37:01'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 20:37:01'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 20:37:01'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 20:37:01'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'FC 10/29/2020 20:37:01'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'FC 10/29/2020 20:37:01'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 20:37:01'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 20:37:01'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/29/2020 20:37:01'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/29/2020 20:37:01'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 20:37:01'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 20:37:01'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'FC 10/29/2020 20:37:01'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'FC 10/29/2020 20:37:01'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'FC 10/29/2020 20:37:01'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'FC 10/29/2020 20:37:01'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 20:37:33'!
test16XPlayerShouldWinWhenCompletingAColumn
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 2@2.
	game putXAt: 2@1.
	game putOAt: 3@3.
	game putXAt: 3@1.
	
	self assert: game isOver.
	self assert: game hasPlayerXWon.! !

!methodRemoval: TerniLapilliTest #test16 stamp: 'FC 10/29/2020 20:37:33'!
test16
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 2@2.
	game putXAt: 2@1.
	game putOAt: 3@3.
	game putXAt: 3@1.
	
	self assert: game isOver.
	self assert: game hasPlayerXWon.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 20:37:47'!
test17OPlayerShouldWinWhenCompletingAColumn
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 1@1.
	game putXAt: 2@2.
	game putOAt: 2@1.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	self assert: game isOver.
	self assert: game hasPlayerOWon.
	self deny:   game hasPlayerXWon.! !

!methodRemoval: TerniLapilliTest #test17 stamp: 'FC 10/29/2020 20:37:47'!
test17
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 1@1.
	game putXAt: 2@2.
	game putOAt: 2@1.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	self assert: game isOver.
	self assert: game hasPlayerOWon.
	self deny:   game hasPlayerXWon.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 20:38:05'!
test18XPlayerShouldWinWhenCompletingADiagonal
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 2@2.
	game putOAt: 2@1.
	game putXAt: 3@3.

	
	self assert: game isOver.
	self assert: game hasPlayerXWon.
	self deny:   game hasPlayerOWon.! !

!methodRemoval: TerniLapilliTest #test18 stamp: 'FC 10/29/2020 20:38:05'!
test18
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 2@2.
	game putOAt: 2@1.
	game putXAt: 3@3.

	
	self assert: game isOver.
	self assert: game hasPlayerXWon.
	self deny:   game hasPlayerOWon.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 20:38:13'!
test19OPlayerShouldWinWhenCompletingADiagonal
	| game |
	game := TerniLapilli new.
	
	game putXAt: 3@1.
	game putOAt: 1@1.
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 2@1.
	game putOAt: 3@3.

	
	self assert: game isOver.
	self assert: game hasPlayerOWon.
	self deny:   game hasPlayerXWon.! !

!methodRemoval: TerniLapilliTest #test19 stamp: 'FC 10/29/2020 20:38:13'!
test19
	| game |
	game := TerniLapilli new.
	
	game putXAt: 3@1.
	game putOAt: 1@1.
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 2@1.
	game putOAt: 3@3.

	
	self assert: game isOver.
	self assert: game hasPlayerOWon.
	self deny:   game hasPlayerXWon.!

!methodRemoval: TerniLapilliTest #test08 stamp: 'FC 10/29/2020 20:38:44'!
test08
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	
	self deny: (game isXAt: 2@1).
	!

!methodRemoval: TerniLapilliTest #test09 stamp: 'FC 10/29/2020 20:38:46'!
test09
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 2@1.
	
	self deny: (game isOAt: 1@1).
	!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 20:38:48'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/29/2020 20:39:01'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 20:42:07'!
test20
	| game |
	game := TerniLapilli new.
	
	game putXAt: 3@1.
	game putOAt: 1@1.
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 2@1.
	game putOAt: 3@3.
	
	self should: [game putXAt:  2@3] raise: Error withMessageText: TerniLapilli gameOverMessage .
	! !
!TerniLapilli class methodsFor: 'error' stamp: 'FC 10/29/2020 20:42:29'!
gameOverMessage
	^'Game is over'.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 20:43:12' prior: 50903832!
putXAt: aPoint 
	self isOver ifTrue: [ self error: self class gameOverMessage ].
	self isPlayingX ifTrue: [
		(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
		(self cellIsOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
		xTokens add: aPoint.
		currentTurn  := #O.
	] ifFalse: [
		self error: self class invalidMoveMessage.
	]! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 20:43:17' prior: 50903813!
putOAt: aPoint 
	self isOver ifTrue: [ self error: self class gameOverMessage ].
	self isPlayingO ifTrue: [
		(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
		(self cellIsOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
		oTokens add: aPoint.
		currentTurn  := #X.
	] ifFalse: [
		self error: self class invalidMoveMessage.
	]! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 20:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 20:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 20:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 20:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 20:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 20:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 20:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 20:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 20:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/29/2020 20:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/29/2020 20:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 20:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 20:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/29/2020 20:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/29/2020 20:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/29/2020 20:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/29/2020 20:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'FC 10/29/2020 20:43:42'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 20:45:32'!
test20XPlayerShouldNotBeAbleToPlayOnGameOver
	| game |
	game := TerniLapilli new.
	
	game putXAt: 3@1.
	game putOAt: 1@1.
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 2@1.
	game putOAt: 3@3.
	
	self should: [game putXAt:  2@3] raise: Error withMessageText: TerniLapilli gameOverMessage .
	! !

!methodRemoval: TerniLapilliTest #test20 stamp: 'FC 10/29/2020 20:45:32'!
test20
	| game |
	game := TerniLapilli new.
	
	game putXAt: 3@1.
	game putOAt: 1@1.
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 2@1.
	game putOAt: 3@3.
	
	self should: [game putXAt:  2@3] raise: Error withMessageText: TerniLapilli gameOverMessage .
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 20:48:07'!
test21
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	self should: [game putXAt:  1@1] raise: Error withMessageText: TerniLapilli tokenLimitExceededMessage .
	
	self deny: game isOver.
	! !

!testRun: #TerniLapilliTest #test21 stamp: 'FC 10/29/2020 20:48:12'!
ERROR!

!testRun: #TerniLapilliTest #test21 stamp: 'FC 10/29/2020 20:48:15'!
ERROR!
!TerniLapilli class methodsFor: 'error' stamp: 'FC 10/29/2020 20:48:22'!
tokenLimitExceededMessage
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error' stamp: 'FC 10/29/2020 20:48:38' prior: 50904760!
tokenLimitExceededMessage
	^'Ya hay 3 piezas'! !

!testRun: #TerniLapilliTest #test21 stamp: 'FC 10/29/2020 20:48:41'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 20:50:05' prior: 50904626!
putXAt: aPoint 
	self isOver ifTrue: [ self error: self class gameOverMessage ].
	self isPlayingX ifTrue: [
		xTokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
		(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
		(self cellIsOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
		xTokens add: aPoint.
		currentTurn  := #O.
	] ifFalse: [
		self error: self class invalidMoveMessage.
	]! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/29/2020 20:51:09' prior: 50904642!
putOAt: aPoint 
	self isOver ifTrue: [ self error: self class gameOverMessage ].
	self isPlayingO ifTrue: [
		oTokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
		(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
		(self cellIsOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
		oTokens add: aPoint.
		currentTurn  := #X.
	] ifFalse: [
		self error: self class invalidMoveMessage.
	]! !

!testRun: #TerniLapilliTest #test21 stamp: 'FC 10/29/2020 20:51:13'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'FC 10/29/2020 20:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 20:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 20:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 20:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 20:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 20:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 20:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 20:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 20:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 20:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/29/2020 20:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/29/2020 20:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 20:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 20:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/29/2020 20:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/29/2020 20:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/29/2020 20:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/29/2020 20:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/29/2020 20:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'FC 10/29/2020 20:51:15'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 20:51:34'!
test21XPlayerShouldNotHaveMoreThanThreeTokens
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	self should: [game putXAt:  1@1] raise: Error withMessageText: TerniLapilli tokenLimitExceededMessage .
	
	self deny: game isOver.
	! !

!methodRemoval: TerniLapilliTest #test21 stamp: 'FC 10/29/2020 20:51:34'!
test21
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	self should: [game putXAt:  1@1] raise: Error withMessageText: TerniLapilli tokenLimitExceededMessage .
	
	self deny: game isOver.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 20:53:42'!
test22
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	game moveXFrom: 1@2 to: 1@1.
	
	self assert isXAt: 1@1.
	! !

!testRun: #TerniLapilliTest #test22 stamp: 'FC 10/29/2020 20:53:44'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 20:53:50'!
moveXFrom: aPoint to: aPoint2 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 20:54:30' prior: 50904916!
moveXFrom: aPoint to: aPoint2 
	xTokens remove: aPoint. 
	xTokens add: aPoint2.! !

!testRun: #TerniLapilliTest #test22 stamp: 'FC 10/29/2020 20:54:32'!
ERROR!

!testRun: #TerniLapilliTest #test22 stamp: 'FC 10/29/2020 20:54:36'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 20:54:41' prior: 50904904!
test22
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	game moveXFrom: 1@2 to: 1@1.
	
	self assert: game isXAt: 1@1.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/29/2020 20:54:47' prior: 50904932!
test22
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	game moveXFrom: 1@2 to: 1@1.
	
	self assert: (game isXAt: 1@1).
	! !

!testRun: #TerniLapilliTest #test22 stamp: 'FC 10/29/2020 20:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/29/2020 20:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/29/2020 20:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/29/2020 20:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/29/2020 20:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/29/2020 20:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 20:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/29/2020 20:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 20:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/29/2020 20:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/29/2020 20:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/29/2020 20:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 20:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/29/2020 20:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/29/2020 20:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/29/2020 20:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/29/2020 20:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/29/2020 20:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/29/2020 20:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/29/2020 20:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'FC 10/29/2020 20:54:48'!
PASSED!

----SNAPSHOT----(29 October 2020 22:43:13) CuisUniversity-4383.image priorSource: 18306786!

----SNAPSHOT----(29 October 2020 22:43:24) CuisUniversity-4383.image priorSource: 18347965!

----STARTUP---- (31 October 2020 16:32:14) as C:\Users\Felip\Desktop\Dev\Inge 1\ST\windows64\CuisUniversity-4383.image!

!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:34:45'!
test23
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	self should: [game moveXFrom: 2@2 to: 1@1] raise: Error withMessageText: TerniLapilli invalidMoveMessage.	

	! !

!testRun: #TerniLapilliTest #test23 stamp: 'FC 10/31/2020 16:34:47'!
FAILURE!

!testRun: #TerniLapilliTest #test23 stamp: 'FC 10/31/2020 16:34:58'!
FAILURE!

!testRun: #TerniLapilliTest #test23 stamp: 'FC 10/31/2020 16:35:05'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:36:13' prior: 50904921!
moveXFrom: aPoint to: aPoint2 

	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
	xTokens remove: aPoint. 
	xTokens add: aPoint2.! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 16:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 16:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 16:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 16:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 16:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 16:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 16:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 16:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 16:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 16:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 16:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 16:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 16:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 16:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 16:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 16:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 16:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 16:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 16:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'FC 10/31/2020 16:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'FC 10/31/2020 16:36:14'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:36:39'!
test24
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	self should: [game moveXFrom: 1@2 to: 2@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.	

	! !

!testRun: #TerniLapilliTest #test24 stamp: 'FC 10/31/2020 16:36:42'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 16:37:33'!
isOccupied: aPoint
	^(self isXAt: aPoint) or: [self isOAt: aPoint ]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:37:34' prior: 50904772!
putXAt: aPoint 
	self isOver ifTrue: [ self error: self class gameOverMessage ].
	self isPlayingX ifTrue: [
		xTokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
		(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
		(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
		xTokens add: aPoint.
		currentTurn  := #O.
	] ifFalse: [
		self error: self class invalidMoveMessage.
	]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:37:34' prior: 50904790!
putOAt: aPoint 
	self isOver ifTrue: [ self error: self class gameOverMessage ].
	self isPlayingO ifTrue: [
		oTokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
		(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
		(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
		oTokens add: aPoint.
		currentTurn  := #X.
	] ifFalse: [
		self error: self class invalidMoveMessage.
	]! !

!methodRemoval: TerniLapilli #cellIsOccupied: stamp: 'FC 10/31/2020 16:37:34'!
cellIsOccupied: aPoint
	^(self isXAt: aPoint) or: [self isOAt: aPoint ]!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 16:37:36'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 16:37:36'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 16:37:36'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 16:37:36'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 16:37:36'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 16:37:36'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 16:37:36'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 16:37:36'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 16:37:36'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 16:37:36'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 16:37:36'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 16:37:36'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 16:37:36'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 16:37:36'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 16:37:36'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 16:37:36'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 16:37:36'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 16:37:36'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 16:37:36'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'FC 10/31/2020 16:37:36'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'FC 10/31/2020 16:37:36'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'FC 10/31/2020 16:37:36'!
FAILURE!

!testRun: #TerniLapilliTest #test24 stamp: 'FC 10/31/2020 16:37:36'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:38:05' prior: 50905055!
moveXFrom: aPoint to: aPoint2 
	(self isOccupied: aPoint2) ifTrue: [self error self class invalidMoveMessage ].
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
	xTokens remove: aPoint. 
	xTokens add: aPoint2.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:38:08' prior: 50905273!
moveXFrom: aPoint to: aPoint2 
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ].
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
	xTokens remove: aPoint. 
	xTokens add: aPoint2.! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 16:38:08'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 16:38:08'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 16:38:08'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 16:38:08'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 16:38:08'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 16:38:08'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 16:38:08'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 16:38:08'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 16:38:08'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 16:38:08'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 16:38:08'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 16:38:08'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 16:38:09'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 16:38:09'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 16:38:09'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 16:38:09'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 16:38:09'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 16:38:09'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 16:38:09'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'FC 10/31/2020 16:38:09'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'FC 10/31/2020 16:38:09'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'FC 10/31/2020 16:38:09'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:39:48' prior: 50905284!
moveXFrom: aPoint to: aPoint2 
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ].
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
	
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	currentTurn := #O.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:39:51' prior: 50905369!
moveXFrom: aPoint to: aPoint2 
	
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ].
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
	
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	currentTurn := #O.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:41:28'!
test25
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	game moveXFrom: 1@2 to: 1@1.
	
	self should: [	game moveXFrom: 1@2 to: 1@1] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
! !

!testRun: #TerniLapilliTest #test25 stamp: 'FC 10/31/2020 16:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 16:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 16:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 16:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 16:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 16:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 16:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 16:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 16:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 16:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 16:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 16:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 16:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 16:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 16:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 16:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 16:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 16:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 16:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 16:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'FC 10/31/2020 16:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'FC 10/31/2020 16:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'FC 10/31/2020 16:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'FC 10/31/2020 16:41:30'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:41:56' prior: 50905393!
test25
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	game moveXFrom: 1@2 to: 1@1.
	
	self should: [	game moveXFrom: 1@1 to: 1@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
! !

!testRun: #TerniLapilliTest #test25 stamp: 'FC 10/31/2020 16:41:57'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 16:42:54' prior: 50905155!
putXAt: aPoint 
	self isOver ifTrue: [ self error: self class gameOverMessage ].
	self isPlayingX ifFalse: [
		self error: self class invalidMoveMessage.
	].
	
	xTokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
	(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
	(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
	xTokens add: aPoint.
	currentTurn  := #O.
! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 16:43:18' prior: 50905173!
putOAt: aPoint 
	self isOver ifTrue: [ self error: self class gameOverMessage ].
	self isPlayingO ifFalse: [
		self error: self class invalidMoveMessage.
	]
	
	oTokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
	(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
	(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
	oTokens add: aPoint.
	currentTurn  := #X.
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:43:39' prior: 50905381!
moveXFrom: aPoint to: aPoint2 
	
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ].
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
	
	self isPlayingX ifFalse: [
		self error: self class invalidMoveMessage.
	].
		
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	currentTurn := #O.! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 16:43:39'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 16:43:39'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 16:43:39'!
FAILURE!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 16:43:39'!
ERROR!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 16:43:39'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 16:43:39'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 16:43:39'!
ERROR!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 16:43:39'!
FAILURE!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 16:43:39'!
ERROR!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 16:43:39'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 16:43:39'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 16:43:39'!
ERROR!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 16:43:39'!
ERROR!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 16:43:39'!
ERROR!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 16:43:39'!
ERROR!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 16:43:39'!
ERROR!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 16:43:39'!
ERROR!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 16:43:39'!
ERROR!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 16:43:40'!
ERROR!

!testRun: #TerniLapilliTest #test22 stamp: 'FC 10/31/2020 16:43:40'!
ERROR!

!testRun: #TerniLapilliTest #test23 stamp: 'FC 10/31/2020 16:43:40'!
ERROR!

!testRun: #TerniLapilliTest #test24 stamp: 'FC 10/31/2020 16:43:40'!
ERROR!

!testRun: #TerniLapilliTest #test25 stamp: 'FC 10/31/2020 16:43:40'!
ERROR!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 16:43:47'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 16:43:47'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 16:43:47'!
FAILURE!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 16:43:47'!
ERROR!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 16:43:47'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 16:43:47'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 16:43:47'!
ERROR!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 16:43:47'!
FAILURE!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 16:43:47'!
ERROR!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 16:43:47'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 16:43:47'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 16:43:47'!
ERROR!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 16:43:47'!
ERROR!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 16:43:47'!
ERROR!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 16:43:47'!
ERROR!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 16:43:47'!
ERROR!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 16:43:47'!
ERROR!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 16:43:47'!
ERROR!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 16:43:47'!
ERROR!

!testRun: #TerniLapilliTest #test22 stamp: 'FC 10/31/2020 16:43:47'!
ERROR!

!testRun: #TerniLapilliTest #test23 stamp: 'FC 10/31/2020 16:43:47'!
ERROR!

!testRun: #TerniLapilliTest #test24 stamp: 'FC 10/31/2020 16:43:47'!
ERROR!

!testRun: #TerniLapilliTest #test25 stamp: 'FC 10/31/2020 16:43:47'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 16:43:54' prior: 50905518!
putOAt: aPoint 
	self isOver ifTrue: [ self error: self class gameOverMessage ].
	self isPlayingO ifFalse: [
		self error: self class invalidMoveMessage.
	].
	
	oTokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
	(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
	(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
	oTokens add: aPoint.
	currentTurn  := #X.
! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 16:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 16:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 16:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 16:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 16:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 16:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 16:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 16:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 16:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 16:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 16:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 16:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 16:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 16:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 16:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 16:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 16:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 16:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 16:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'FC 10/31/2020 16:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'FC 10/31/2020 16:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'FC 10/31/2020 16:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'FC 10/31/2020 16:43:55'!
PASSED!

Object subclass: #TerniLapilliState
	instanceVariableNames: 'currentTurn xTokens oTokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliState category: 'TerniLapilli' stamp: 'FC 10/31/2020 16:45:41'!
Object subclass: #TerniLapilliState
	instanceVariableNames: 'currentTurn xTokens oTokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TerniLapilliState subclass: #XTurnState
	instanceVariableNames: 'currentTurn xTokens oTokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TerniLapilliState subclass: #XTurnState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #XTurnState category: 'TerniLapilli' stamp: 'FC 10/31/2020 16:46:08'!
TerniLapilliState subclass: #XTurnState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TerniLapilliState subclass: #OTurnState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #OTurnState category: 'TerniLapilli' stamp: 'FC 10/31/2020 16:46:12'!
TerniLapilliState subclass: #OTurnState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

Object subclass: #TerniLapilliState
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliState category: 'TerniLapilli' stamp: 'FC 10/31/2020 16:46:20'!
Object subclass: #TerniLapilliState
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliState class methodsFor: 'nil' stamp: 'FC 10/31/2020 16:46:50'!
for: aTerniLapilli
	self initializeFor: aTerniLapilli! !
!TerniLapilliState methodsFor: 'no messages' stamp: 'FC 10/31/2020 16:47:27'!
initializeFor: aTerniLapilli
	game := aTerniLapilli.! !

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FC 10/31/2020 16:48:20'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentTurn xTokens oTokens state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 16:48:12' prior: 50905500!
putXAt: aPoint 
	state putXAt: aPoint.
"
	self isOver ifTrue: [ self error: self class gameOverMessage ].
	self isPlayingX ifFalse: [
		self error: self class invalidMoveMessage.
	].
	
	xTokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
	(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
	(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
	xTokens add: aPoint.
	currentTurn  := #O.
"! !
!TerniLapilli methodsFor: 'initialization' stamp: 'FC 10/31/2020 16:48:54' prior: 50902369 overrides: 16896425!
initialize 
	currentTurn := #X.
	xTokens := OrderedCollection new.
	oTokens := OrderedCollection new.
	state := XTurnState for: self.! !
!OTurnState methodsFor: 'no messages' stamp: 'FC 10/31/2020 16:49:33'!
putXAt: aPoint
	self error: TerniLapilli invalidMoveMessage.! !
!XTurnState methodsFor: 'no messages' stamp: 'FC 10/31/2020 16:49:45'!
putXAt: aPoint
	! !
!XTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:51:06' prior: 50905898!
putXAt: aPoint
	game putXAtWhenValid: aPoint.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 16:51:48'!
putXAtWhenValid: aPoint 

	self isOver ifTrue: [ self error: self class gameOverMessage ].

	xTokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
	(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
	(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
	xTokens add: aPoint.
	state := OTurnState for: self.! !

TerniLapilliState subclass: #GameOverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #GameOverState category: 'TerniLapilli' stamp: 'FC 10/31/2020 16:52:36'!
TerniLapilliState subclass: #GameOverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 16:57:56' prior: 50905906!
putXAtWhenValid: aPoint 
	"
	self isOver ifTrue: [ self error: self class gameOverMessage ].
	"
	xTokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
	(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
	(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
	xTokens add: aPoint.
	self hasPlayerXWon 
	ifTrue: 
		[ state := GameOverState for: self] 
	ifFalse: 
		[state := OTurnState for: self.		]! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 16:58:18' prior: 50905934!
putXAtWhenValid: aPoint 

	xTokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
	(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
	(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
	xTokens add: aPoint.
	self hasPlayerXWon 
	ifTrue: 
		[ state := GameOverState for: self] 
	ifFalse: 
		[state := OTurnState for: self.		]! !
!GameOverState methodsFor: 'no messages' stamp: 'FC 10/31/2020 16:58:34'!
putXAt: aPoint
	self error: self class gameOverMessage
	! !
!GameOverState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:58:38'!
putOAt: aPoint
	self error: self class gameOverMessage
	! !
!GameOverState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:58:58'!
isOver
	 ^true.
	! !
!OTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:59:17'!
isOver
	^false.! !
!XTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:59:22'!
isOver
	^false.! !
!XTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:59:39'!
putOAt: aPoint
	self error: TerniLapilli invalidMoveMessage.! !
!OTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:00:04'!
putOAt: aPoint
	game putOAtWhenValid: aPoint.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 17:00:45'!
putOAtWhenValid: aPoint 

	oTokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
	(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
	(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
	oTokens add: aPoint.
	self hasPlayerOWon 
	ifTrue: 
		[ state := GameOverState for: self] 
	ifFalse: 
		[state := XTurnState for: self.		]! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 17:01:10' prior: 50905702!
putOAt: aPoint 
	state putOAt: aPoint.! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 17:01:14'!
ERROR!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 17:01:14'!
ERROR!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 17:01:14'!
ERROR!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 17:01:14'!
ERROR!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 17:01:14'!
ERROR!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:01:14'!
ERROR!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:01:14'!
ERROR!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:01:14'!
ERROR!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:01:14'!
ERROR!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 17:01:14'!
ERROR!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 17:01:14'!
ERROR!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:01:14'!
ERROR!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:01:14'!
ERROR!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:01:14'!
ERROR!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:01:14'!
ERROR!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:01:14'!
ERROR!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:01:14'!
ERROR!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 17:01:14'!
ERROR!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 17:01:14'!
ERROR!

!testRun: #TerniLapilliTest #test22 stamp: 'FC 10/31/2020 17:01:14'!
ERROR!

!testRun: #TerniLapilliTest #test23 stamp: 'FC 10/31/2020 17:01:14'!
ERROR!

!testRun: #TerniLapilliTest #test24 stamp: 'FC 10/31/2020 17:01:14'!
ERROR!

!testRun: #TerniLapilliTest #test25 stamp: 'FC 10/31/2020 17:01:14'!
ERROR!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 17:01:20'!
ERROR!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 17:01:20'!
ERROR!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 17:01:53'!
ERROR!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 17:01:53'!
ERROR!
!TerniLapilliState class methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:02:09' prior: 50905849!
for: aTerniLapilli
	self new initializeFor: aTerniLapilli! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 17:02:11'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 17:02:11'!
ERROR!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 17:02:11'!
FAILURE!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 17:02:11'!
ERROR!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 17:02:11'!
ERROR!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:02:11'!
ERROR!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:02:11'!
ERROR!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:02:11'!
ERROR!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:02:11'!
ERROR!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 17:02:11'!
FAILURE!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 17:02:11'!
ERROR!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:02:11'!
ERROR!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:02:11'!
ERROR!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:02:11'!
ERROR!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:02:11'!
ERROR!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:02:11'!
ERROR!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:02:11'!
ERROR!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 17:02:11'!
ERROR!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 17:02:11'!
ERROR!

!testRun: #TerniLapilliTest #test22 stamp: 'FC 10/31/2020 17:02:11'!
ERROR!

!testRun: #TerniLapilliTest #test23 stamp: 'FC 10/31/2020 17:02:11'!
ERROR!

!testRun: #TerniLapilliTest #test24 stamp: 'FC 10/31/2020 17:02:11'!
ERROR!

!testRun: #TerniLapilliTest #test25 stamp: 'FC 10/31/2020 17:02:12'!
ERROR!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 17:02:20'!
ERROR!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 17:02:20'!
ERROR!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 17:02:32'!
ERROR!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 17:02:32'!
ERROR!
!TerniLapilliState class methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:03:01' prior: 50906109!
for: aTerniLapilli
	^self new initializeFor: aTerniLapilli! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 17:03:04'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 17:03:04'!
FAILURE!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 17:03:04'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 17:03:04'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 17:03:04'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:03:04'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:03:04'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:03:04'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:03:04'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 17:03:04'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 17:03:04'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:03:04'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:03:04'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:03:04'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:03:04'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:03:04'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:03:04'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 17:03:04'!
FAILURE!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 17:03:04'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'FC 10/31/2020 17:03:04'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'FC 10/31/2020 17:03:04'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'FC 10/31/2020 17:03:04'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'FC 10/31/2020 17:03:04'!
PASSED!
!OTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:03:36'!
isPlayingO
	^true.! !
!OTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:03:41'!
isPlayingX
	^false.! !
!XTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:03:53'!
isPlayingX
	^true.! !
!XTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:03:57'!
isPlayingO
	^false.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 17:04:36' prior: 50901924!
isPlayingX
	^state isPlayingX.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 17:04:44' prior: 50901920!
isPlayingO
	^state isPlayingO.! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 17:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 17:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 17:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 17:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 17:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 17:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 17:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 17:04:47'!
FAILURE!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 17:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'FC 10/31/2020 17:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'FC 10/31/2020 17:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'FC 10/31/2020 17:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'FC 10/31/2020 17:04:47'!
FAILURE!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 17:05:16'!
FAILURE!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 17:05:16'!
FAILURE!
!GameOverState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:05:41' prior: 50905969!
putXAt: aPoint
	self error: TerniLapilli gameOverMessage
	! !
!GameOverState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:05:52' prior: 50905974!
putOAt: aPoint
	self error: TerniLapilli gameOverMessage
	! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 17:05:56'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 17:05:56'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 17:05:56'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 17:05:57'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 17:05:57'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:05:57'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:05:57'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:05:57'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:05:57'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 17:05:57'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 17:05:57'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:05:57'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:05:57'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:05:57'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:05:57'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:05:57'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:05:57'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 17:05:57'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 17:05:57'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'FC 10/31/2020 17:05:57'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'FC 10/31/2020 17:05:57'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'FC 10/31/2020 17:05:57'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'FC 10/31/2020 17:05:57'!
FAILURE!

!testRun: #TerniLapilliTest #test25 stamp: 'FC 10/31/2020 17:05:57'!
FAILURE!

!testRun: #TerniLapilliTest #test25 stamp: 'FC 10/31/2020 17:06:02'!
FAILURE!

!testRun: #TerniLapilliTest #test25 stamp: 'FC 10/31/2020 17:06:02'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 17:07:40'!
validateMove: aPoint

	xTokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
	(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
	(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
	xTokens add: aPoint! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 17:07:40' prior: 50905953!
putXAtWhenValid: aPoint 

	self validateMove: aPoint.
	self hasPlayerXWon 
	ifTrue: 
		[ state := GameOverState for: self] 
	ifFalse: 
		[state := OTurnState for: self.		]! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 17:07:59' prior: 50906502!
putXAtWhenValid: aPoint 

	self validateMove: aPoint for: xTokens.
	self hasPlayerXWon 
	ifTrue: 
		[ state := GameOverState for: self] 
	ifFalse: 
		[state := OTurnState for: self.		]! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 17:08:17'!
validateMove: aPoint for: tokens

	tokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
	(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
	(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
	tokens add: aPoint! !

!methodRemoval: TerniLapilli #validateMove: stamp: 'FC 10/31/2020 17:08:18'!
validateMove: aPoint

	xTokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
	(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
	(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
	xTokens add: aPoint!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 17:08:43' prior: 50906000!
putOAtWhenValid: aPoint 

	self validateMove: aPoint for: oTokens. 
	self hasPlayerOWon 
	ifTrue: 
		[ state := GameOverState for: self] 
	ifFalse: 
		[state := XTurnState for: self.		]! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 17:08:48'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 17:08:48'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 17:08:48'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 17:08:48'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 17:08:48'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:08:48'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:08:48'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:08:48'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:08:48'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 17:08:48'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 17:08:48'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:08:48'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:08:48'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:08:48'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:08:48'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:08:48'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:08:48'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 17:08:48'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 17:08:48'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'FC 10/31/2020 17:08:48'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'FC 10/31/2020 17:08:48'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'FC 10/31/2020 17:08:48'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'FC 10/31/2020 17:08:48'!
FAILURE!

!testRun: #TerniLapilliTest #test25 stamp: 'FC 10/31/2020 17:08:48'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:09:02' prior: 50905485!
test25
	| game |
	"
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	game moveXFrom: 1@2 to: 1@1.
	
	self should: [	game moveXFrom: 1@1 to: 1@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	"! !

!testRun: #TerniLapilliTest #test25 stamp: 'FC 10/31/2020 17:09:05'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 17:09:05'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 17:09:05'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 17:09:05'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 17:09:05'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 17:09:05'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:09:05'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:09:05'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:09:05'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:09:05'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 17:09:05'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 17:09:05'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:09:05'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:09:05'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:09:05'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:09:05'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:09:05'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:09:05'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 17:09:05'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 17:09:05'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'FC 10/31/2020 17:09:05'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'FC 10/31/2020 17:09:05'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'FC 10/31/2020 17:09:05'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'FC 10/31/2020 17:09:05'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 17:10:57' prior: 50905867!
putXAt: aPoint 
	state putXAt: aPoint.
! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 17:11:38' prior: 50903253!
isOver
	^state isOver.! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 17:11:40'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 17:11:40'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 17:11:40'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 17:11:40'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 17:11:40'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:11:40'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:11:40'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:11:40'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:11:40'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 17:11:40'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 17:11:40'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:11:40'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:11:40'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:11:40'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:11:40'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:11:40'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:11:40'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 17:11:40'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 17:11:40'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'FC 10/31/2020 17:11:40'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'FC 10/31/2020 17:11:40'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'FC 10/31/2020 17:11:40'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'FC 10/31/2020 17:11:40'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:16:39' prior: 50906634!
test25
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	game moveXFrom: 1@2 to: 1@1.
	
	self should: [	game moveXFrom: 1@1 to: 1@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:17:36'!
moveXWhenValidFrom: aPoint to: aPoint2 
	
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ].
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
		
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	state := OTurnState for: self.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:18:00' prior: 50905536!
moveXFrom: aPoint to: aPoint2 
	
	state moveXFrom: aPoint to: aPoint2.! !
!XTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:19:01'!
moveXWhenValidFrom: aPoint to: aPoint2 
	game moveXWhenValidFrom: aPoint  to: aPoint2. ! !
!XTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:19:15'!
moveXFrom: aPoint to: aPoint2 
	game moveXWhenValidFrom: aPoint  to: aPoint2. ! !
!XTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:19:15' prior: 50906842!
moveXWhenValidFrom: aPoint to: aPoint2 
	game moveXFrom: aPoint  to: aPoint2. ! !
!XTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:19:15' prior: 50906848!
moveXFrom: aPoint to: aPoint2 
	game moveXFrom: aPoint  to: aPoint2. ! !

!methodRemoval: XTurnState #moveXWhenValidFrom:to: stamp: 'FC 10/31/2020 17:19:15'!
moveXWhenValidFrom: aPoint to: aPoint2 
	game moveXFrom: aPoint  to: aPoint2. !
!XTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:19:25' prior: 50906860!
moveXFrom: aPoint to: aPoint2 
	game moveXWhenValidFrom: aPoint  to: aPoint2. ! !
!XTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:19:44'!
moveOFrom: aPoint to: aPoint2 
	self error: TerniLapilli invalidMoveMessage.! !
!OTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:20:00'!
moveXFrom: aPoint to: aPoint2 
	self error: TerniLapilli invalidMoveMessage.! !

!testRun: #TerniLapilliTest #test25 stamp: 'FC 10/31/2020 17:20:06'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 17:20:06'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 17:20:06'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 17:20:06'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 17:20:06'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 17:20:06'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:20:06'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:20:06'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:20:06'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:20:06'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 17:20:06'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 17:20:06'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:20:06'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:20:06'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:20:06'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:20:06'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:20:06'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:20:06'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 17:20:06'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 17:20:06'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'FC 10/31/2020 17:20:06'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'FC 10/31/2020 17:20:06'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'FC 10/31/2020 17:20:06'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'FC 10/31/2020 17:20:06'!
PASSED!
!GameOverState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:20:48'!
moveXFrom: aPoint to: aPoint2 
	self error: TerniLapilli gameOverMessage.! !
!GameOverState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:20:52'!
moveOFrom: aPoint to: aPoint2 
	self error: TerniLapilli gameOverMessage.! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'xTokens oTokens state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FC 10/31/2020 17:21:09'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'xTokens oTokens state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 17:21:11'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 17:21:11'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 17:21:11'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 17:21:11'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 17:21:11'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:21:11'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:21:11'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:21:11'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:21:11'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 17:21:11'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 17:21:11'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:21:11'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:21:11'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:21:11'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:21:11'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:21:11'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:21:11'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 17:21:11'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 17:21:12'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'FC 10/31/2020 17:21:12'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'FC 10/31/2020 17:21:12'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'FC 10/31/2020 17:21:12'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'FC 10/31/2020 17:21:12'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:21:52'!
test22XPlayerShouldMoveCorrectly
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	game moveXFrom: 1@2 to: 1@1.
	
	self assert: (game isXAt: 1@1).
	! !

!methodRemoval: TerniLapilliTest #test22 stamp: 'FC 10/31/2020 17:21:53'!
test22
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	game moveXFrom: 1@2 to: 1@1.
	
	self assert: (game isXAt: 1@1).
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:22:35'!
test23XPlayerShouldNotMoveInvalidToken
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	self should: [game moveXFrom: 2@2 to: 1@1] raise: Error withMessageText: TerniLapilli invalidMoveMessage.	

	! !

!methodRemoval: TerniLapilliTest #test23 stamp: 'FC 10/31/2020 17:22:35'!
test23
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	self should: [game moveXFrom: 2@2 to: 1@1] raise: Error withMessageText: TerniLapilli invalidMoveMessage.	

	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:22:59'!
test24XPlayerShouldNotOverlapTokens
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	self should: [game moveXFrom: 1@2 to: 2@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.	

	! !

!methodRemoval: TerniLapilliTest #test24 stamp: 'FC 10/31/2020 17:22:59'!
test24
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	self should: [game moveXFrom: 1@2 to: 2@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.	

	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:23:17'!
test25XPlayerShouldNotMoveWhenNotItsTurn
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	game moveXFrom: 1@2 to: 1@1.
	
	self should: [	game moveXFrom: 1@1 to: 1@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	! !

!methodRemoval: TerniLapilliTest #test25 stamp: 'FC 10/31/2020 17:23:17'!
test25
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	game moveXFrom: 1@2 to: 1@1.
	
	self should: [	game moveXFrom: 1@1 to: 1@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:23:45'!
test25XPlayerShouldNotMoveWhenIsOTurn
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	game moveXFrom: 1@2 to: 1@1.
	
	self should: [	game moveXFrom: 1@1 to: 1@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	! !

!methodRemoval: TerniLapilliTest #test25XPlayerShouldNotMoveWhenNotItsTurn stamp: 'FC 10/31/2020 17:23:45'!
test25XPlayerShouldNotMoveWhenNotItsTurn
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	game moveXFrom: 1@2 to: 1@1.
	
	self should: [	game moveXFrom: 1@1 to: 1@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:26:40'!
test26
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	self should: [game moveXFrom: 1@2 to: 3@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	! !

1@1 dist: 2@1.!

1@1 dist: 2@2.!

1@1 dist: 1@2.!

1@1 dist: 3@2.!

2@1 dist: 2@2.!

2@1 dist: 2@3.!

2@1 dist: 2@3.!

1@1 dist: 2@2!

1@1 dist: 2@2.!

2@2 dist: 1@1.!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:30:51' prior: 50906824!
moveXWhenValidFrom: aPoint to: aPoint2 
	
	(aPoint dist: aPoint2 = 1) or: [aPoint = 2@2 or: [aPoint2 = 2@2]] .
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ].
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
		
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	state := OTurnState for: self.! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 17:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 17:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 17:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 17:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 17:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 17:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 17:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 17:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 17:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 17:30:55'!
ERROR!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 17:30:55'!
FAILURE!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 17:30:55'!
FAILURE!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 17:30:55'!
ERROR!

!testRun: #TerniLapilliTest #test26 stamp: 'FC 10/31/2020 17:30:55'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:31:18' prior: 50907206!
moveXWhenValidFrom: aPoint to: aPoint2 
	
	(aPoint dist: aPoint2 = 1) or: [aPoint = 2@2 or: [aPoint2 = 2@2]] ifFalse:[ self error: self class invalidMoveMessage] .
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ].
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
		
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	state := OTurnState for: self.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:31:29' prior: 50907303!
moveXWhenValidFrom: aPoint to: aPoint2 
	
	((aPoint dist: aPoint2 = 1) or: [aPoint = 2@2 or: [aPoint2 = 2@2]]) ifFalse: [ self error: self class invalidMoveMessage] .
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ].
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
		
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	state := OTurnState for: self.! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 17:31:30'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 17:31:30'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 17:31:30'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 17:31:30'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 17:31:30'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:31:30'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:31:30'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:31:30'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:31:30'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 17:31:30'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 17:31:31'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:31:31'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:31:31'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:31:31'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:31:31'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:31:31'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:31:31'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 17:31:31'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 17:31:31'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 17:31:31'!
ERROR!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 17:31:31'!
FAILURE!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 17:31:31'!
FAILURE!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 17:31:31'!
ERROR!

!testRun: #TerniLapilliTest #test26 stamp: 'FC 10/31/2020 17:31:31'!
FAILURE!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 17:31:59'!
ERROR!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 17:31:59'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:32:28' prior: 50907319!
moveXWhenValidFrom: aPoint to: aPoint2 
	
	(((aPoint dist: aPoint2) = 1) or: [aPoint = 2@2 or: [aPoint2 = 2@2]]) ifFalse: [ self error: self class invalidMoveMessage] .
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ].
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
		
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	state := OTurnState for: self.! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 17:32:29'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 17:32:29'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 17:32:29'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 17:32:29'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 17:32:29'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:32:29'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:32:29'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:32:29'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:32:29'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 17:32:29'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 17:32:29'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:32:29'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:32:29'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:32:29'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:32:29'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:32:29'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:32:29'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 17:32:29'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 17:32:29'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 17:32:29'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 17:32:29'!
FAILURE!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 17:32:29'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 17:32:29'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'FC 10/31/2020 17:32:29'!
FAILURE!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 17:32:44'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 17:32:47'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 17:32:48'!
FAILURE!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 17:32:48'!
FAILURE!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 17:33:01'!
FAILURE!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 17:33:43'!
FAILURE!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 17:33:43'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:34:03' prior: 50907425!
moveXWhenValidFrom: aPoint to: aPoint2 
	
	(((aPoint dist: aPoint2) = 1) or: [(aPoint = 2@2) or: [aPoint2 = 2@2]]) ifFalse: [ self error: self class invalidMoveMessage] .
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ].
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
		
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	state := OTurnState for: self.! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 17:34:03'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 17:34:03'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 17:34:03'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 17:34:03'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 17:34:03'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:34:03'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:34:03'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:34:03'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:34:03'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 17:34:03'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 17:34:03'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:34:03'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:34:03'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:34:03'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:34:03'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:34:04'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:34:04'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 17:34:04'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 17:34:04'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 17:34:04'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 17:34:04'!
FAILURE!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 17:34:04'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 17:34:04'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'FC 10/31/2020 17:34:04'!
FAILURE!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 17:34:51'!
FAILURE!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 17:34:51'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:35:15' prior: 50907087!
test23XPlayerShouldNotMoveInvalidToken
	| game |
	game := TerniLapilli new.
	
	self halt.
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	self should: [game moveXFrom: 2@2 to: 1@1] raise: Error withMessageText: TerniLapilli invalidMoveMessage.	

	! !

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 17:36:02'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:36:25' prior: 50907548!
moveXWhenValidFrom: aPoint to: aPoint2 
	
	(((aPoint dist: aPoint2) = 1) or: [(aPoint = (2@2)) or: [aPoint2 = 2@2]]) ifFalse: [ self error: self class invalidMoveMessage] .
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ].
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
		
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	state := OTurnState for: self.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:36:31' prior: 50907671!
moveXWhenValidFrom: aPoint to: aPoint2 
	
	(((aPoint dist: aPoint2) = 1) or: [(aPoint = (2@2)) or: [aPoint2 = (2@2)]]) ifFalse: [ self error: self class invalidMoveMessage] .
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ].
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
		
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	state := OTurnState for: self.! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 17:36:32'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 17:36:32'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 17:36:32'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 17:36:32'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 17:36:32'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:36:32'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:36:32'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:36:32'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:36:32'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 17:36:32'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 17:36:32'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:36:32'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:36:32'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:36:32'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:36:32'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:36:32'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:36:32'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 17:36:32'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 17:36:32'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 17:36:32'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 17:36:32'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 17:36:32'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'FC 10/31/2020 17:36:32'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:36:44' prior: 50907654!
test23XPlayerShouldNotMoveInvalidToken
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	self should: [game moveXFrom: 2@2 to: 1@1] raise: Error withMessageText: TerniLapilli invalidMoveMessage.	

	! !

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 17:36:44'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 17:36:44'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 17:36:44'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 17:36:44'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 17:36:44'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 17:36:44'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:36:44'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:36:44'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:36:44'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:36:44'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 17:36:44'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 17:36:45'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:36:45'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:36:45'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:36:45'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:36:45'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:36:45'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:36:45'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 17:36:45'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 17:36:45'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 17:36:45'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 17:36:45'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 17:36:45'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 17:36:45'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'FC 10/31/2020 17:36:45'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 17:37:22'!
validatePlacement: aPoint for: tokens

	tokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
	(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
	(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
	tokens add: aPoint! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:37:22' prior: 50906545!
putOAtWhenValid: aPoint 

	self validatePlacement: aPoint for: oTokens. 
	self hasPlayerOWon 
	ifTrue: 
		[ state := GameOverState for: self] 
	ifFalse: 
		[state := XTurnState for: self.		]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:37:22' prior: 50906511!
putXAtWhenValid: aPoint 

	self validatePlacement: aPoint for: xTokens.
	self hasPlayerXWon 
	ifTrue: 
		[ state := GameOverState for: self] 
	ifFalse: 
		[state := OTurnState for: self.		]! !

!methodRemoval: TerniLapilli #validateMove:for: stamp: 'FC 10/31/2020 17:37:22'!
validateMove: aPoint for: tokens

	tokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
	(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
	(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
	tokens add: aPoint!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:37:44' prior: 50907688!
moveXWhenValidFrom: aPoint to: aPoint2 
	
	(((aPoint dist: aPoint2) = 1) or: [(aPoint = (2@2)) or: [aPoint2 = (2@2)]]) ifFalse: [ self error: self class invalidMoveMessage] .
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ].
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
		
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	state := OTurnState for: self.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:38:36'!
validateMoveFrom: aPoint2 to: aPoint

	(((aPoint dist: aPoint2) = 1) or: [(aPoint = (2@2)) or: [aPoint2 = (2@2)]]) ifFalse: [ self error: self class invalidMoveMessage] .
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:38:36' prior: 50907927!
moveXWhenValidFrom: aPoint to: aPoint2 
	
	self validateMoveFrom: aPoint2 to: aPoint.
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
		
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	state := OTurnState for: self.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:39:40' prior: 50907943!
validateMoveFrom: aPoint to: aPoint2

	(((aPoint2 dist: aPoint) = 1) or: [aPoint2 = (2@2) or: [aPoint = (2@2)]]) ifFalse: [ self error: self class invalidMoveMessage] .
	(self isOccupied: aPoint) ifTrue: [self error: self class invalidMoveMessage ]! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 17:39:41'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 17:39:41'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 17:39:41'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 17:39:41'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 17:39:41'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:39:41'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:39:41'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:39:41'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:39:41'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 17:39:41'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 17:39:41'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:39:41'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:39:41'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:39:41'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:39:41'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:39:41'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:39:41'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 17:39:41'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 17:39:41'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 17:39:41'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 17:39:41'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 17:39:41'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 17:39:41'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'FC 10/31/2020 17:39:41'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 17:39:42'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 17:39:42'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 17:39:42'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 17:39:42'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 17:39:42'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:39:43'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:39:43'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:39:43'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:39:43'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 17:39:43'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 17:39:43'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:39:43'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:39:43'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:39:43'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:39:43'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:39:43'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:39:43'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 17:39:43'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 17:39:43'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 17:39:43'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 17:39:43'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 17:39:43'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 17:39:43'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'FC 10/31/2020 17:39:43'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:40:35'!
test27
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	
	self should: [game moveXFrom: 1@2 to: 1@1] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	! !

!testRun: #TerniLapilliTest #test27 stamp: 'FC 10/31/2020 17:40:36'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:42:04' prior: 50907954!
moveXWhenValidFrom: aPoint to: aPoint2 
	
	self validateMoveFrom: aPoint2 to: aPoint.
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
	xTokens size < 3 ifTrue: [self error: self class invalidMoveMessage ].
		
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	state := OTurnState for: self.! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 17:42:05'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 17:42:05'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 17:42:05'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 17:42:05'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 17:42:05'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:42:05'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 17:42:05'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:42:05'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 17:42:05'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 17:42:05'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 17:42:05'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:42:05'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 17:42:05'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:42:05'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 17:42:05'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:42:05'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 17:42:05'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 17:42:05'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 17:42:05'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 17:42:05'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 17:42:05'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 17:42:05'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 17:42:05'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'FC 10/31/2020 17:42:05'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'FC 10/31/2020 17:42:06'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'FC 10/31/2020 18:04:26'!
PASSED!

----STARTUP---- (31 October 2020 18:12:16) as C:\Users\Felip\Desktop\Dev\Inge 1\ST\windows64\CuisUniversity-4383.image!

!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:34:45'!
test23
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	self should: [game moveXFrom: 2@2 to: 1@1] raise: Error withMessageText: TerniLapilli invalidMoveMessage.	

	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:36:13' prior: 50904921!
moveXFrom: aPoint to: aPoint2 

	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
	xTokens remove: aPoint. 
	xTokens add: aPoint2.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:36:39'!
test24
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	self should: [game moveXFrom: 1@2 to: 2@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.	

	! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 16:37:33'!
isOccupied: aPoint
	^(self isXAt: aPoint) or: [self isOAt: aPoint ]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:37:34' prior: 50904772!
putXAt: aPoint 
	self isOver ifTrue: [ self error: self class gameOverMessage ].
	self isPlayingX ifTrue: [
		xTokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
		(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
		(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
		xTokens add: aPoint.
		currentTurn  := #O.
	] ifFalse: [
		self error: self class invalidMoveMessage.
	]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:37:34' prior: 50904790!
putOAt: aPoint 
	self isOver ifTrue: [ self error: self class gameOverMessage ].
	self isPlayingO ifTrue: [
		oTokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
		(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
		(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
		oTokens add: aPoint.
		currentTurn  := #X.
	] ifFalse: [
		self error: self class invalidMoveMessage.
	]! !

!methodRemoval: TerniLapilli #cellIsOccupied: stamp: 'FC 10/31/2020 18:12:18'!
cellIsOccupied: aPoint
	^(self isXAt: aPoint) or: [self isOAt: aPoint ]!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:38:05' prior: 50908271!
moveXFrom: aPoint to: aPoint2 
	(self isOccupied: aPoint2) ifTrue: [self error self class invalidMoveMessage ].
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
	xTokens remove: aPoint. 
	xTokens add: aPoint2.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:38:08' prior: 50908337!
moveXFrom: aPoint to: aPoint2 
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ].
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
	xTokens remove: aPoint. 
	xTokens add: aPoint2.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:39:48' prior: 50908348!
moveXFrom: aPoint to: aPoint2 
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ].
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
	
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	currentTurn := #O.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:39:51' prior: 50908359!
moveXFrom: aPoint to: aPoint2 
	
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ].
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
	
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	currentTurn := #O.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:41:28'!
test25
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	game moveXFrom: 1@2 to: 1@1.
	
	self should: [	game moveXFrom: 1@2 to: 1@1] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:41:56' prior: 50908383!
test25
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	game moveXFrom: 1@2 to: 1@1.
	
	self should: [	game moveXFrom: 1@1 to: 1@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 16:42:54' prior: 50908296!
putXAt: aPoint 
	self isOver ifTrue: [ self error: self class gameOverMessage ].
	self isPlayingX ifFalse: [
		self error: self class invalidMoveMessage.
	].
	
	xTokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
	(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
	(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
	xTokens add: aPoint.
	currentTurn  := #O.
! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 16:43:18' prior: 50908314!
putOAt: aPoint 
	self isOver ifTrue: [ self error: self class gameOverMessage ].
	self isPlayingO ifFalse: [
		self error: self class invalidMoveMessage.
	]
	
	oTokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
	(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
	(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
	oTokens add: aPoint.
	currentTurn  := #X.
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:43:39' prior: 50908371!
moveXFrom: aPoint to: aPoint2 
	
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ].
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
	
	self isPlayingX ifFalse: [
		self error: self class invalidMoveMessage.
	].
		
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	currentTurn := #O.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 16:43:54' prior: 50908427!
putOAt: aPoint 
	self isOver ifTrue: [ self error: self class gameOverMessage ].
	self isPlayingO ifFalse: [
		self error: self class invalidMoveMessage.
	].
	
	oTokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
	(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
	(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
	oTokens add: aPoint.
	currentTurn  := #X.
! !

!classDefinition: #TerniLapilliState category: 'TerniLapilli' stamp: 'FC 10/31/2020 18:12:18'!
Object subclass: #TerniLapilliState
	instanceVariableNames: 'currentTurn xTokens oTokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliState category: 'TerniLapilli' stamp: 'FC 10/31/2020 18:12:18'!
Object subclass: #TerniLapilliState
	instanceVariableNames: 'currentTurn xTokens oTokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #XTurnState category: 'TerniLapilli' stamp: 'FC 10/31/2020 18:12:18'!
TerniLapilliState subclass: #XTurnState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #XTurnState category: 'TerniLapilli' stamp: 'FC 10/31/2020 18:12:18'!
TerniLapilliState subclass: #XTurnState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #OTurnState category: 'TerniLapilli' stamp: 'FC 10/31/2020 18:12:18'!
TerniLapilliState subclass: #OTurnState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #OTurnState category: 'TerniLapilli' stamp: 'FC 10/31/2020 18:12:18'!
TerniLapilliState subclass: #OTurnState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliState category: 'TerniLapilli' stamp: 'FC 10/31/2020 18:12:19'!
Object subclass: #TerniLapilliState
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliState category: 'TerniLapilli' stamp: 'FC 10/31/2020 18:12:19'!
Object subclass: #TerniLapilliState
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliState class methodsFor: 'nil' stamp: 'FC 10/31/2020 16:46:50'!
for: aTerniLapilli
	self initializeFor: aTerniLapilli! !
!TerniLapilliState methodsFor: 'no messages' stamp: 'FC 10/31/2020 16:47:27'!
initializeFor: aTerniLapilli
	game := aTerniLapilli.! !

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FC 10/31/2020 18:12:19'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentTurn xTokens oTokens state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 16:48:12' prior: 50908409!
putXAt: aPoint 
	state putXAt: aPoint.
"
	self isOver ifTrue: [ self error: self class gameOverMessage ].
	self isPlayingX ifFalse: [
		self error: self class invalidMoveMessage.
	].
	
	xTokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
	(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
	(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
	xTokens add: aPoint.
	currentTurn  := #O.
"! !
!TerniLapilli methodsFor: 'initialization' stamp: 'FC 10/31/2020 16:48:54' prior: 50902369 overrides: 16896425!
initialize 
	currentTurn := #X.
	xTokens := OrderedCollection new.
	oTokens := OrderedCollection new.
	state := XTurnState for: self.! !
!OTurnState methodsFor: 'no messages' stamp: 'FC 10/31/2020 16:49:33'!
putXAt: aPoint
	self error: TerniLapilli invalidMoveMessage.! !
!XTurnState methodsFor: 'no messages' stamp: 'FC 10/31/2020 16:49:45'!
putXAt: aPoint
	! !
!XTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:51:06' prior: 50908585!
putXAt: aPoint
	game putXAtWhenValid: aPoint.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 16:51:48'!
putXAtWhenValid: aPoint 

	self isOver ifTrue: [ self error: self class gameOverMessage ].

	xTokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
	(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
	(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
	xTokens add: aPoint.
	state := OTurnState for: self.! !

!classDefinition: #GameOverState category: 'TerniLapilli' stamp: 'FC 10/31/2020 18:12:19'!
TerniLapilliState subclass: #GameOverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #GameOverState category: 'TerniLapilli' stamp: 'FC 10/31/2020 18:12:19'!
TerniLapilliState subclass: #GameOverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 16:57:56' prior: 50908593!
putXAtWhenValid: aPoint 
	"
	self isOver ifTrue: [ self error: self class gameOverMessage ].
	"
	xTokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
	(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
	(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
	xTokens add: aPoint.
	self hasPlayerXWon 
	ifTrue: 
		[ state := GameOverState for: self] 
	ifFalse: 
		[state := OTurnState for: self.		]! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 16:58:18' prior: 50908624!
putXAtWhenValid: aPoint 

	xTokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
	(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
	(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
	xTokens add: aPoint.
	self hasPlayerXWon 
	ifTrue: 
		[ state := GameOverState for: self] 
	ifFalse: 
		[state := OTurnState for: self.		]! !
!GameOverState methodsFor: 'no messages' stamp: 'FC 10/31/2020 16:58:34'!
putXAt: aPoint
	self error: self class gameOverMessage
	! !
!GameOverState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:58:38'!
putOAt: aPoint
	self error: self class gameOverMessage
	! !
!GameOverState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:58:58'!
isOver
	 ^true.
	! !
!OTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:59:17'!
isOver
	^false.! !
!XTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:59:22'!
isOver
	^false.! !
!XTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 16:59:39'!
putOAt: aPoint
	self error: TerniLapilli invalidMoveMessage.! !
!OTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:00:04'!
putOAt: aPoint
	game putOAtWhenValid: aPoint.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 17:00:45'!
putOAtWhenValid: aPoint 

	oTokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
	(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
	(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
	oTokens add: aPoint.
	self hasPlayerOWon 
	ifTrue: 
		[ state := GameOverState for: self] 
	ifFalse: 
		[state := XTurnState for: self.		]! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 17:01:10' prior: 50908459!
putOAt: aPoint 
	state putOAt: aPoint.! !
!TerniLapilliState class methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:02:09' prior: 50908536!
for: aTerniLapilli
	self new initializeFor: aTerniLapilli! !
!TerniLapilliState class methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:03:01' prior: 50908711!
for: aTerniLapilli
	^self new initializeFor: aTerniLapilli! !
!OTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:03:36'!
isPlayingO
	^true.! !
!OTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:03:41'!
isPlayingX
	^false.! !
!XTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:03:53'!
isPlayingX
	^true.! !
!XTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:03:57'!
isPlayingO
	^false.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 17:04:36' prior: 50901924!
isPlayingX
	^state isPlayingX.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 17:04:44' prior: 50901920!
isPlayingO
	^state isPlayingO.! !
!GameOverState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:05:41' prior: 50908659!
putXAt: aPoint
	self error: TerniLapilli gameOverMessage
	! !
!GameOverState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:05:52' prior: 50908664!
putOAt: aPoint
	self error: TerniLapilli gameOverMessage
	! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 17:07:40'!
validateMove: aPoint

	xTokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
	(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
	(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
	xTokens add: aPoint! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 17:07:40' prior: 50908643!
putXAtWhenValid: aPoint 

	self validateMove: aPoint.
	self hasPlayerXWon 
	ifTrue: 
		[ state := GameOverState for: self] 
	ifFalse: 
		[state := OTurnState for: self.		]! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 17:07:59' prior: 50908770!
putXAtWhenValid: aPoint 

	self validateMove: aPoint for: xTokens.
	self hasPlayerXWon 
	ifTrue: 
		[ state := GameOverState for: self] 
	ifFalse: 
		[state := OTurnState for: self.		]! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 17:08:17'!
validateMove: aPoint for: tokens

	tokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
	(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
	(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
	tokens add: aPoint! !

!methodRemoval: TerniLapilli #validateMove: stamp: 'FC 10/31/2020 18:12:20'!
validateMove: aPoint

	xTokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
	(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
	(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
	xTokens add: aPoint!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 17:08:43' prior: 50908690!
putOAtWhenValid: aPoint 

	self validateMove: aPoint for: oTokens. 
	self hasPlayerOWon 
	ifTrue: 
		[ state := GameOverState for: self] 
	ifFalse: 
		[state := XTurnState for: self.		]! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:09:02' prior: 50908396!
test25
	| game |
	"
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	game moveXFrom: 1@2 to: 1@1.
	
	self should: [	game moveXFrom: 1@1 to: 1@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	"! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 17:10:57' prior: 50908554!
putXAt: aPoint 
	state putXAt: aPoint.
! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 17:11:38' prior: 50903253!
isOver
	^state isOver.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:16:39' prior: 50908823!
test25
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	game moveXFrom: 1@2 to: 1@1.
	
	self should: [	game moveXFrom: 1@1 to: 1@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:17:36'!
moveXWhenValidFrom: aPoint to: aPoint2 
	
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ].
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
		
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	state := OTurnState for: self.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:18:00' prior: 50908445!
moveXFrom: aPoint to: aPoint2 
	
	state moveXFrom: aPoint to: aPoint2.! !
!XTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:19:01'!
moveXWhenValidFrom: aPoint to: aPoint2 
	game moveXWhenValidFrom: aPoint  to: aPoint2. ! !
!XTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:19:15'!
moveXFrom: aPoint to: aPoint2 
	game moveXWhenValidFrom: aPoint  to: aPoint2. ! !
!XTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:19:15' prior: 50908875!
moveXWhenValidFrom: aPoint to: aPoint2 
	game moveXFrom: aPoint  to: aPoint2. ! !
!XTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:19:15' prior: 50908881!
moveXFrom: aPoint to: aPoint2 
	game moveXFrom: aPoint  to: aPoint2. ! !

!methodRemoval: XTurnState #moveXWhenValidFrom:to: stamp: 'FC 10/31/2020 18:12:20'!
moveXWhenValidFrom: aPoint to: aPoint2 
	game moveXFrom: aPoint  to: aPoint2. !
!XTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:19:25' prior: 50908893!
moveXFrom: aPoint to: aPoint2 
	game moveXWhenValidFrom: aPoint  to: aPoint2. ! !
!XTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:19:44'!
moveOFrom: aPoint to: aPoint2 
	self error: TerniLapilli invalidMoveMessage.! !
!OTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:20:00'!
moveXFrom: aPoint to: aPoint2 
	self error: TerniLapilli invalidMoveMessage.! !
!GameOverState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:20:48'!
moveXFrom: aPoint to: aPoint2 
	self error: TerniLapilli gameOverMessage.! !
!GameOverState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:20:52'!
moveOFrom: aPoint to: aPoint2 
	self error: TerniLapilli gameOverMessage.! !

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FC 10/31/2020 18:12:20'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'xTokens oTokens state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FC 10/31/2020 18:12:20'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'xTokens oTokens state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:21:52'!
test22XPlayerShouldMoveCorrectly
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	game moveXFrom: 1@2 to: 1@1.
	
	self assert: (game isXAt: 1@1).
	! !

!methodRemoval: TerniLapilliTest #test22 stamp: 'FC 10/31/2020 18:12:20'!
test22
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	game moveXFrom: 1@2 to: 1@1.
	
	self assert: (game isXAt: 1@1).
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:22:35'!
test23XPlayerShouldNotMoveInvalidToken
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	self should: [game moveXFrom: 2@2 to: 1@1] raise: Error withMessageText: TerniLapilli invalidMoveMessage.	

	! !

!methodRemoval: TerniLapilliTest #test23 stamp: 'FC 10/31/2020 18:12:20'!
test23
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	self should: [game moveXFrom: 2@2 to: 1@1] raise: Error withMessageText: TerniLapilli invalidMoveMessage.	

	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:22:59'!
test24XPlayerShouldNotOverlapTokens
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	self should: [game moveXFrom: 1@2 to: 2@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.	

	! !

!methodRemoval: TerniLapilliTest #test24 stamp: 'FC 10/31/2020 18:12:20'!
test24
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	self should: [game moveXFrom: 1@2 to: 2@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.	

	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:23:17'!
test25XPlayerShouldNotMoveWhenNotItsTurn
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	game moveXFrom: 1@2 to: 1@1.
	
	self should: [	game moveXFrom: 1@1 to: 1@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	! !

!methodRemoval: TerniLapilliTest #test25 stamp: 'FC 10/31/2020 18:12:20'!
test25
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	game moveXFrom: 1@2 to: 1@1.
	
	self should: [	game moveXFrom: 1@1 to: 1@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:23:45'!
test25XPlayerShouldNotMoveWhenIsOTurn
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	game moveXFrom: 1@2 to: 1@1.
	
	self should: [	game moveXFrom: 1@1 to: 1@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	! !

!methodRemoval: TerniLapilliTest #test25XPlayerShouldNotMoveWhenNotItsTurn stamp: 'FC 10/31/2020 18:12:20'!
test25XPlayerShouldNotMoveWhenNotItsTurn
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	game moveXFrom: 1@2 to: 1@1.
	
	self should: [	game moveXFrom: 1@1 to: 1@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:26:40'!
test26
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	self should: [game moveXFrom: 1@2 to: 3@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:30:51' prior: 50908857!
moveXWhenValidFrom: aPoint to: aPoint2 
	
	(aPoint dist: aPoint2 = 1) or: [aPoint = 2@2 or: [aPoint2 = 2@2]] .
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ].
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
		
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	state := OTurnState for: self.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:31:18' prior: 50909082!
moveXWhenValidFrom: aPoint to: aPoint2 
	
	(aPoint dist: aPoint2 = 1) or: [aPoint = 2@2 or: [aPoint2 = 2@2]] ifFalse:[ self error: self class invalidMoveMessage] .
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ].
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
		
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	state := OTurnState for: self.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:31:29' prior: 50909097!
moveXWhenValidFrom: aPoint to: aPoint2 
	
	((aPoint dist: aPoint2 = 1) or: [aPoint = 2@2 or: [aPoint2 = 2@2]]) ifFalse: [ self error: self class invalidMoveMessage] .
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ].
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
		
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	state := OTurnState for: self.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:32:28' prior: 50909113!
moveXWhenValidFrom: aPoint to: aPoint2 
	
	(((aPoint dist: aPoint2) = 1) or: [aPoint = 2@2 or: [aPoint2 = 2@2]]) ifFalse: [ self error: self class invalidMoveMessage] .
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ].
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
		
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	state := OTurnState for: self.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:34:03' prior: 50909129!
moveXWhenValidFrom: aPoint to: aPoint2 
	
	(((aPoint dist: aPoint2) = 1) or: [(aPoint = 2@2) or: [aPoint2 = 2@2]]) ifFalse: [ self error: self class invalidMoveMessage] .
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ].
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
		
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	state := OTurnState for: self.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:35:15' prior: 50908968!
test23XPlayerShouldNotMoveInvalidToken
	| game |
	game := TerniLapilli new.
	
	self halt.
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	self should: [game moveXFrom: 2@2 to: 1@1] raise: Error withMessageText: TerniLapilli invalidMoveMessage.	

	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:36:25' prior: 50909146!
moveXWhenValidFrom: aPoint to: aPoint2 
	
	(((aPoint dist: aPoint2) = 1) or: [(aPoint = (2@2)) or: [aPoint2 = 2@2]]) ifFalse: [ self error: self class invalidMoveMessage] .
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ].
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
		
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	state := OTurnState for: self.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:36:31' prior: 50909177!
moveXWhenValidFrom: aPoint to: aPoint2 
	
	(((aPoint dist: aPoint2) = 1) or: [(aPoint = (2@2)) or: [aPoint2 = (2@2)]]) ifFalse: [ self error: self class invalidMoveMessage] .
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ].
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
		
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	state := OTurnState for: self.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:36:44' prior: 50909163!
test23XPlayerShouldNotMoveInvalidToken
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	self should: [game moveXFrom: 2@2 to: 1@1] raise: Error withMessageText: TerniLapilli invalidMoveMessage.	

	! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 17:37:22'!
validatePlacement: aPoint for: tokens

	tokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
	(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
	(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
	tokens add: aPoint! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:37:22' prior: 50908813!
putOAtWhenValid: aPoint 

	self validatePlacement: aPoint for: oTokens. 
	self hasPlayerOWon 
	ifTrue: 
		[ state := GameOverState for: self] 
	ifFalse: 
		[state := XTurnState for: self.		]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:37:22' prior: 50908779!
putXAtWhenValid: aPoint 

	self validatePlacement: aPoint for: xTokens.
	self hasPlayerXWon 
	ifTrue: 
		[ state := GameOverState for: self] 
	ifFalse: 
		[state := OTurnState for: self.		]! !

!methodRemoval: TerniLapilli #validateMove:for: stamp: 'FC 10/31/2020 18:12:21'!
validateMove: aPoint for: tokens

	tokens size = 3 ifTrue: [self error: self class tokenLimitExceededMessage ].
	(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
	(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
	tokens add: aPoint!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:37:44' prior: 50909194!
moveXWhenValidFrom: aPoint to: aPoint2 
	
	(((aPoint dist: aPoint2) = 1) or: [(aPoint = (2@2)) or: [aPoint2 = (2@2)]]) ifFalse: [ self error: self class invalidMoveMessage] .
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ].
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
		
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	state := OTurnState for: self.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:38:36'!
validateMoveFrom: aPoint2 to: aPoint

	(((aPoint dist: aPoint2) = 1) or: [(aPoint = (2@2)) or: [aPoint2 = (2@2)]]) ifFalse: [ self error: self class invalidMoveMessage] .
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:38:36' prior: 50909268!
moveXWhenValidFrom: aPoint to: aPoint2 
	
	self validateMoveFrom: aPoint2 to: aPoint.
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
		
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	state := OTurnState for: self.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:39:40' prior: 50909284!
validateMoveFrom: aPoint to: aPoint2

	(((aPoint2 dist: aPoint) = 1) or: [aPoint2 = (2@2) or: [aPoint = (2@2)]]) ifFalse: [ self error: self class invalidMoveMessage] .
	(self isOccupied: aPoint) ifTrue: [self error: self class invalidMoveMessage ]! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:40:35'!
test27
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	
	self should: [game moveXFrom: 1@2 to: 1@1] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 17:42:04' prior: 50909295!
moveXWhenValidFrom: aPoint to: aPoint2 
	
	self validateMoveFrom: aPoint2 to: aPoint.
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
	xTokens size < 3 ifTrue: [self error: self class invalidMoveMessage ].
		
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	state := OTurnState for: self.! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 18:12:27'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 18:12:27'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 18:12:27'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 18:12:27'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'FC 10/31/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'FC 10/31/2020 18:12:28'!
PASSED!

----SNAPSHOT----(31 October 2020 18:12:34) CuisUniversity-4383.image priorSource: 18348058!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:14:01'!
test26XPlayerShouldNotMoveMoreThanOneSlot
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	self should: [game moveXFrom: 1@2 to: 3@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	! !

!methodRemoval: TerniLapilliTest #test26 stamp: 'FC 10/31/2020 18:14:03'!
test26
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	self should: [game moveXFrom: 1@2 to: 3@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:14:20'!
test27XPlayerShouldNotMoveBeforePlacingAllTokens
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	
	self should: [game moveXFrom: 1@2 to: 1@1] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	! !

!methodRemoval: TerniLapilliTest #test27 stamp: 'FC 10/31/2020 18:14:23'!
test27
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	
	self should: [game moveXFrom: 1@2 to: 1@1] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:15:14'!
test28OPlayerShouldMoveCorrectly
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	game moveXFrom: 1@2 to: 1@1.
	game moveOFrom: 3@1 to: 3@2.
	self assert: (game isOAt: 3@2).
	! !

!testRun: #TerniLapilliTest #test28OPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:15:15'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:16:02'!
moveOWhenValidFrom: aPoint to: aPoint2 
	
	self validateMoveFrom: aPoint to: aPoint2.
	(self isOAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
	xTokens size < 3 ifTrue: [self error: self class invalidMoveMessage ].
		
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	state := OTurnState for: self.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:16:11' prior: 50909328!
moveXWhenValidFrom: aPoint to: aPoint2 
	
	self validateMoveFrom: aPoint to: aPoint2.
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
	xTokens size < 3 ifTrue: [self error: self class invalidMoveMessage ].
		
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	state := OTurnState for: self.! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 18:16:11'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 18:16:11'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 18:16:11'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 18:16:11'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 18:16:11'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:16:11'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:16:11'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:16:11'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:16:11'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 18:16:11'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 18:16:11'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:16:11'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:16:11'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:16:11'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:16:11'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:16:11'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:16:11'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 18:16:11'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 18:16:11'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:16:11'!
ERROR!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:16:11'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:16:11'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 18:16:11'!
ERROR!

!testRun: #TerniLapilliTest #test26XPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:16:11'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:16:11'!
PASSED!

!testRun: #TerniLapilliTest #test28OPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:16:11'!
ERROR!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 18:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 18:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 18:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 18:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 18:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 18:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 18:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 18:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 18:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:16:15'!
ERROR!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 18:16:15'!
ERROR!

!testRun: #TerniLapilliTest #test26XPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test28OPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:16:15'!
ERROR!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:16:22'!
ERROR!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:16:22'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:17:09' prior: 50909306!
validateMoveFrom: aPoint to: aPoint2

	(((aPoint2 dist: aPoint) = 1) or: [aPoint2 = (2@2) or: [aPoint = (2@2)]]) ifFalse: [ self error: self class invalidMoveMessage] .
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ]! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 18:17:10'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 18:17:10'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 18:17:10'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 18:17:10'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 18:17:10'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:17:10'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:17:10'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:17:10'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:17:10'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 18:17:10'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 18:17:10'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:17:10'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:17:10'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:17:10'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:17:10'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:17:10'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:17:10'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 18:17:10'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 18:17:10'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:17:10'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:17:10'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:17:10'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 18:17:10'!
PASSED!

!testRun: #TerniLapilliTest #test26XPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:17:10'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:17:10'!
PASSED!

!testRun: #TerniLapilliTest #test28OPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:17:10'!
ERROR!

!testRun: #TerniLapilliTest #test28OPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:17:10'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:17:38' prior: 50909490!
moveOWhenValidFrom: aPoint to: aPoint2 
	
	self validateMoveFrom: aPoint to: aPoint2.
	(self isOAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
	oTokens size < 3 ifTrue: [self error: self class invalidMoveMessage ].
		
	oTokens remove: aPoint. 
	oTokens add: aPoint2.
	
	state := XTurnState for: self.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:18:08'!
moveOFrom: aPoint to: aPoint2 
	
	state moveOFrom: aPoint to: aPoint2.! !
!OTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:18:36'!
moveOFrom: aPoint to: aPoint2 
	game moveOWhenValidFrom: aPoint  to: aPoint2. ! !

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:18:53'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:18:55'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 18:18:55'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 18:18:55'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 18:18:55'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 18:18:55'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 18:18:55'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:18:55'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:18:55'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:18:55'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:18:55'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 18:18:55'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 18:18:55'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:18:55'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:18:55'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:18:55'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:18:55'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:18:55'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:18:55'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 18:18:55'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 18:18:56'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:18:56'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:18:56'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:18:56'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 18:18:56'!
PASSED!

!testRun: #TerniLapilliTest #test26XPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:18:56'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:18:56'!
PASSED!

!testRun: #TerniLapilliTest #test28OPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:18:56'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:20:23'!
test29XPlayerShouldMoveCorrectly
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	game moveXFrom: 1@2 to: 1@1.
	self should: [game moveOFrom: 3@3 to: 3@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	! !

!testRun: #TerniLapilliTest #test29XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test26XPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test29XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test28OPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test29XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test26XPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test28OPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test29XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test29XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test26XPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test28OPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test29XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:20:41'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:20:59'!
test29OPlayerShouldNotMoveInvalidToken
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	game moveXFrom: 1@2 to: 1@1.
	self should: [game moveOFrom: 3@3 to: 3@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	! !

!methodRemoval: TerniLapilliTest #test29XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:21:03'!
test29XPlayerShouldMoveCorrectly
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	game moveXFrom: 1@2 to: 1@1.
	self should: [game moveOFrom: 3@3 to: 3@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:22:21'!
test30XPlayerShouldMoveCorrectly
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	game moveXFrom: 1@2 to: 1@1.
	
	self should: [ game moveOFrom: 2@2 to: 2@3 ] raise: Error withMessageText: TerniLapilli invalidMoveMessage.	

	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:22:47'!
test30OPlayerShouldNotOverlapTokens
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	game moveXFrom: 1@2 to: 1@1.
	
	self should: [ game moveOFrom: 2@2 to: 2@3 ] raise: Error withMessageText: TerniLapilli invalidMoveMessage.	

	! !

!methodRemoval: TerniLapilliTest #test30XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:22:49'!
test30XPlayerShouldMoveCorrectly
	| game |
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	game moveXFrom: 1@2 to: 1@1.
	
	self should: [ game moveOFrom: 2@2 to: 2@3 ] raise: Error withMessageText: TerniLapilli invalidMoveMessage.	

	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:23:55'!
test31OPlayerShouldNotMoveWhenIsXTurn
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	self should: [	game moveOFrom: 2@2 to: 3@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	! !

!testRun: #TerniLapilliTest #test31OPlayerShouldNotMoveWhenIsXTurn stamp: 'FC 10/31/2020 18:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 18:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 18:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 18:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 18:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 18:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 18:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 18:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 18:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 18:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 18:23:59'!
PASSED!

!testRun: #TerniLapilliTest #test26XPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:23:59'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:23:59'!
PASSED!

!testRun: #TerniLapilliTest #test28OPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:23:59'!
PASSED!

!testRun: #TerniLapilliTest #test29OPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:23:59'!
PASSED!

!testRun: #TerniLapilliTest #test30OPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:23:59'!
PASSED!

!testRun: #TerniLapilliTest #test31OPlayerShouldNotMoveWhenIsXTurn stamp: 'FC 10/31/2020 18:23:59'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:24:52'!
test32OPlayerShouldNotMoveMoreThanOneSlot
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	game putOAt: 2@3.
	game putXAt: 3@3.
	game putOAt: 3@1.
	
	game moveXFrom: 1@2 to: 1@1.
	
	self should: [game moveOFrom: 3@1 to: 1@2] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	! !

!testRun: #TerniLapilliTest #test32OPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:24:54'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 18:24:54'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 18:24:54'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 18:24:54'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 18:24:54'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 18:24:54'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:24:54'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:24:54'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:24:54'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:24:54'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 18:24:54'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 18:24:54'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:24:54'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:24:54'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:24:55'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:24:55'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:24:55'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:24:55'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 18:24:55'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 18:24:55'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:24:55'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:24:55'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:24:55'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 18:24:55'!
PASSED!

!testRun: #TerniLapilliTest #test26XPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:24:55'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:24:55'!
PASSED!

!testRun: #TerniLapilliTest #test28OPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:24:55'!
PASSED!

!testRun: #TerniLapilliTest #test29OPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:24:55'!
PASSED!

!testRun: #TerniLapilliTest #test30OPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:24:55'!
PASSED!

!testRun: #TerniLapilliTest #test31OPlayerShouldNotMoveWhenIsXTurn stamp: 'FC 10/31/2020 18:24:55'!
PASSED!

!testRun: #TerniLapilliTest #test32OPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:24:55'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:25:30'!
test33OPlayerShouldNotMoveBeforePlacingAllTokens
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	
	self should: [game moveOFrom: 2@2 to: 1@1] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	! !

!testRun: #TerniLapilliTest #test33OPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test26XPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test28OPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test29OPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test30OPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test31OPlayerShouldNotMoveWhenIsXTurn stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test32OPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:25:31'!
PASSED!

!testRun: #TerniLapilliTest #test33OPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:25:31'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:26:12'!
test34XPlayerShouldWinOnMovingPhase
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 1@2.
	game putOAt: 2@2.
	game putXAt: 1@3.
	
	self should: [game moveOFrom: 2@2 to: 1@1] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:28:16' prior: 50910666!
test34XPlayerShouldWinOnMovingPhase
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 1@3.
	game putXAt: 2@2.
	game putOAt: 2@1.
	game putXAt: 2@3.
	game putOAt: 3@3.	
	
	self should: [game moveOFrom: 2@2 to: 1@1] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:28:54' prior: 50910677!
test34XPlayerShouldWinOnMovingPhase
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 1@3.
	game putXAt: 2@2.
	game putOAt: 2@1.
	game putXAt: 3@2.
	game putOAt: 3@3.	
	
	self should: [game moveOFrom: 2@2 to: 1@1] raise: Error withMessageText: TerniLapilli invalidMoveMessage.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:29:52' prior: 50910690!
test34XPlayerShouldWinOnMovingPhase
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 1@3.
	game putXAt: 2@2.
	game putOAt: 2@1.
	game putXAt: 3@2.
	game putOAt: 3@3.	
	
	game moveXFrom: 1@1 to: 1@2.
	
	self assert: game hasPlayerXWon.
	! !

!testRun: #TerniLapilliTest #test34XPlayerShouldWinOnMovingPhase stamp: 'FC 10/31/2020 18:29:53'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 18:29:53'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 18:29:53'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 18:29:53'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 18:29:53'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 18:29:53'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:29:53'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:29:53'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:29:53'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:29:53'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 18:29:53'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 18:29:53'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:29:53'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:29:53'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:29:53'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:29:54'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:29:54'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:29:54'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 18:29:54'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 18:29:54'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:29:54'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:29:54'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:29:54'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 18:29:54'!
PASSED!

!testRun: #TerniLapilliTest #test26XPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:29:54'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:29:54'!
PASSED!

!testRun: #TerniLapilliTest #test28OPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:29:54'!
PASSED!

!testRun: #TerniLapilliTest #test29OPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:29:54'!
PASSED!

!testRun: #TerniLapilliTest #test30OPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:29:54'!
PASSED!

!testRun: #TerniLapilliTest #test31OPlayerShouldNotMoveWhenIsXTurn stamp: 'FC 10/31/2020 18:29:54'!
PASSED!

!testRun: #TerniLapilliTest #test32OPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:29:54'!
PASSED!

!testRun: #TerniLapilliTest #test33OPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:29:54'!
PASSED!

!testRun: #TerniLapilliTest #test34XPlayerShouldWinOnMovingPhase stamp: 'FC 10/31/2020 18:29:54'!
PASSED!

!methodRemoval: TerniLapilliTest #test34XPlayerShouldWinOnMovingPhase stamp: 'FC 10/31/2020 18:30:12'!
test34XPlayerShouldWinOnMovingPhase
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 1@1.
	game putOAt: 1@3.
	game putXAt: 2@2.
	game putOAt: 2@1.
	game putXAt: 3@2.
	game putOAt: 3@3.	
	
	game moveXFrom: 1@1 to: 1@2.
	
	self assert: game hasPlayerXWon.
	!

!testRun: #TerniLapilliTest #test33OPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:30:14'!
PASSED!

!testRun: #TerniLapilliTest #test33OPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:30:16'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 18:30:16'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 18:30:16'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 18:30:17'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 18:30:17'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 18:30:17'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:30:17'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:30:17'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:30:17'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:30:17'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 18:30:17'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 18:30:17'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:30:17'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:30:17'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:30:17'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:30:17'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:30:17'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:30:17'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 18:30:17'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 18:30:17'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:30:17'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:30:17'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:30:17'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 18:30:17'!
PASSED!

!testRun: #TerniLapilliTest #test26XPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:30:17'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:30:17'!
PASSED!

!testRun: #TerniLapilliTest #test28OPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:30:17'!
PASSED!

!testRun: #TerniLapilliTest #test29OPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:30:17'!
PASSED!

!testRun: #TerniLapilliTest #test30OPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:30:17'!
PASSED!

!testRun: #TerniLapilliTest #test31OPlayerShouldNotMoveWhenIsXTurn stamp: 'FC 10/31/2020 18:30:17'!
PASSED!

!testRun: #TerniLapilliTest #test32OPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:30:17'!
PASSED!

!testRun: #TerniLapilliTest #test33OPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:30:17'!
PASSED!

OTurnState subclass: #OPlacingState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #OPlacingState category: 'TerniLapilli' stamp: 'FC 10/31/2020 18:31:26'!
OTurnState subclass: #OPlacingState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

OTurnState subclass: #OMovingState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #OMovingState category: 'TerniLapilli' stamp: 'FC 10/31/2020 18:31:33'!
OTurnState subclass: #OMovingState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

XTurnState subclass: #XMovingState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #XMovingState category: 'TerniLapilli' stamp: 'FC 10/31/2020 18:31:38'!
XTurnState subclass: #XMovingState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

XTurnState subclass: #XPlacingState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #XPlacingState category: 'TerniLapilli' stamp: 'FC 10/31/2020 18:31:44'!
XTurnState subclass: #XPlacingState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!OPlacingState methodsFor: 'nil' stamp: 'FC 10/31/2020 18:32:09' overrides: 50908686!
putOAt: aPoint
	game putOAtWhenValid: aPoint.! !
!OMovingState methodsFor: 'no messages' stamp: 'FC 10/31/2020 18:33:04' overrides: 50909828!
moveOFrom: aPoint to: aPoint2 
	game moveOWhenValidFrom: aPoint  to: aPoint2. ! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:34:23' prior: 50909504!
moveXWhenValidFrom: aPoint to: aPoint2 
	
	self validateMoveFrom: aPoint to: aPoint2.
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
	xTokens size < 3 ifTrue: [self error: self class invalidMoveMessage ].
		
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	self hasPlayerXWon 
	ifTrue: 
		[ state := GameOverState for: self] 
	ifFalse: 
		[state := OTurnState for: self.		]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:34:48' prior: 50911013!
moveXWhenValidFrom: aPoint to: aPoint2 
	
	self validateMoveFrom: aPoint to: aPoint2.
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
	xTokens size < 3 ifTrue: [self error: self class invalidMoveMessage ].
		
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	self hasPlayerXWon 
	ifTrue: 
		[ state := GameOverState for: self] 
	ifFalse: 
		[state := OMovingState for: self.		]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:35:33' prior: 50909810!
moveOWhenValidFrom: aPoint to: aPoint2 
	
	self validateMoveFrom: aPoint to: aPoint2.
	(self isOAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
	oTokens size < 3 ifTrue: [self error: self class invalidMoveMessage ].
		
	oTokens remove: aPoint. 
	oTokens add: aPoint2.
	
	self hasPlayerOWon 
	ifTrue: 
		[ state := GameOverState for: self] 
	ifFalse: 
		[state := XMovingState for: self.		]! !
!OPlacingState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:36:07' overrides: 50909828!
moveOFrom: aPoint to: aPoint2 
	self error: TerniLapilli invalidMoveMessage.! !
!XPlacingState methodsFor: 'nil' stamp: 'FC 10/31/2020 18:37:13' overrides: 50908904!
moveXFrom: aPoint to: aPoint2 
	game moveXWhenValidFrom: aPoint  to: aPoint2. ! !
!XPlacingState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:37:26' overrides: 50908589!
putXAt: aPoint
	game putXAtWhenValid: aPoint.! !

!methodRemoval: XPlacingState #moveXFrom:to: stamp: 'FC 10/31/2020 18:37:34'!
moveXFrom: aPoint to: aPoint2 
	game moveXWhenValidFrom: aPoint  to: aPoint2. !
!XMovingState methodsFor: 'nil' stamp: 'FC 10/31/2020 18:37:39' overrides: 50908904!
moveXFrom: aPoint to: aPoint2 
	game moveXWhenValidFrom: aPoint  to: aPoint2. ! !
!XMovingState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:37:57' overrides: 50908589!
putXAt: aPoint
	self error: TerniLapilli invalidMoveMessage.! !
!XPlacingState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:38:06' overrides: 50908904!
moveXFrom: aPoint to: aPoint2 
	self error: TerniLapilli invalidMoveMessage.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 18:39:15' prior: 50909236!
putOAtWhenValid: aPoint 

	self validatePlacement: aPoint for: oTokens. 
	self hasPlayerOWon 
	ifTrue: 
		[ state := GameOverState for: self] 
	ifFalse: 
		[	xTokens < 3 ifTrue: [
				state := XPlacingState for: self.		
			] ifFalse: [
				state := XMovingState for: self.
			]
		]! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 18:40:08' prior: 50909246!
putXAtWhenValid: aPoint 

	self validatePlacement: aPoint for: xTokens.
	self hasPlayerXWon 
	ifTrue: 
		[ state := GameOverState for: self] 
	ifFalse: 
		[	oTokens size < 3 ifTrue: [
				state := OPlacingState for: self.		
			] ifFalse: [
				state := OMovingState for: self.
			]
		]! !
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 18:40:14' prior: 50911102!
putOAtWhenValid: aPoint 

	self validatePlacement: aPoint for: oTokens. 
	self hasPlayerOWon 
	ifTrue: 
		[ state := GameOverState for: self] 
	ifFalse: 
		[	xTokens size < 3 ifTrue: [
				state := XPlacingState for: self.		
			] ifFalse: [
				state := XMovingState for: self.
			]
		]! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 18:40:15'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 18:40:15'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 18:40:15'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 18:40:15'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 18:40:15'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:40:15'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:40:15'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:40:15'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:40:16'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 18:40:16'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 18:40:16'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:40:16'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:40:16'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:40:16'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:40:16'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:40:16'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:40:16'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 18:40:16'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 18:40:16'!
FAILURE!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:40:16'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:40:16'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:40:16'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 18:40:16'!
PASSED!

!testRun: #TerniLapilliTest #test26XPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:40:16'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:40:16'!
PASSED!

!testRun: #TerniLapilliTest #test28OPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:40:16'!
PASSED!

!testRun: #TerniLapilliTest #test29OPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:40:16'!
PASSED!

!testRun: #TerniLapilliTest #test30OPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:40:16'!
PASSED!

!testRun: #TerniLapilliTest #test31OPlayerShouldNotMoveWhenIsXTurn stamp: 'FC 10/31/2020 18:40:16'!
PASSED!

!testRun: #TerniLapilliTest #test32OPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:40:16'!
PASSED!

!testRun: #TerniLapilliTest #test33OPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:40:16'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 18:40:16'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 18:40:37' prior: 50909223!
validatePlacement: aPoint for: tokens


	(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
	(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
	tokens add: aPoint! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 18:40:39'!
FAILURE!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test26XPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test28OPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test29OPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test30OPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test31OPlayerShouldNotMoveWhenIsXTurn stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test32OPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test33OPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:40:39'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 18:40:39'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FC 10/31/2020 18:40:45' prior: 50911250!
validatePlacement: aPoint for: tokens

	(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
	(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
	tokens add: aPoint! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:41:03' prior: 50911029!
moveXWhenValidFrom: aPoint to: aPoint2 
	
	self validateMoveFrom: aPoint to: aPoint2.
	(self isXAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
		
	xTokens remove: aPoint. 
	xTokens add: aPoint2.
	
	self hasPlayerXWon 
	ifTrue: 
		[ state := GameOverState for: self] 
	ifFalse: 
		[state := OMovingState for: self.		]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:41:08' prior: 50911045!
moveOWhenValidFrom: aPoint to: aPoint2 
	
	self validateMoveFrom: aPoint to: aPoint2.
	(self isOAt: aPoint) ifFalse: [self error: self class invalidMoveMessage ].
		
	oTokens remove: aPoint. 
	oTokens add: aPoint2.
	
	self hasPlayerOWon 
	ifTrue: 
		[ state := GameOverState for: self] 
	ifFalse: 
		[state := XMovingState for: self.		]! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 18:41:10'!
FAILURE!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test26XPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test28OPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test29OPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test30OPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test31OPlayerShouldNotMoveWhenIsXTurn stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test32OPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test33OPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:41:10'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 18:41:10'!
FAILURE!
!XPlacingState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:41:58' prior: 50911096 overrides: 50908904!
moveXFrom: aPoint to: aPoint2 
	self error: TerniLapilli tokenLimitExceededMessage.! !
!OMovingState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:43:35' overrides: 50908686!
putOAt: aPoint
	self error: TerniLapilli tokenLimitExceededMessage.! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 18:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 18:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 18:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 18:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 18:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 18:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 18:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 18:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 18:43:41'!
FAILURE!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 18:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test26XPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:43:41'!
FAILURE!

!testRun: #TerniLapilliTest #test28OPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test29OPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test30OPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test31OPlayerShouldNotMoveWhenIsXTurn stamp: 'FC 10/31/2020 18:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test32OPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test33OPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 18:43:53'!
FAILURE!
!XPlacingState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:44:20' prior: 50911525 overrides: 50908904!
moveXFrom: aPoint to: aPoint2 
	self error: TerniLapilli invalidMoveMessage .! !
!XPlacingState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:44:24' prior: 50911649 overrides: 50908904!
moveXFrom: aPoint to: aPoint2 
	self error: TerniLapilli invalidMoveMessage.! !
!XMovingState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:44:31' prior: 50911090 overrides: 50908589!
putXAt: aPoint
	self error: TerniLapilli tokenLimitExceededMessage.! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 18:44:33'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 18:44:33'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 18:44:33'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 18:44:33'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 18:44:33'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:44:33'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:44:33'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:44:33'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:44:33'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 18:44:33'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 18:44:33'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:44:33'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:44:33'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:44:33'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:44:33'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:44:33'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:44:33'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 18:44:33'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 18:44:33'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 18:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test26XPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test28OPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test29OPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test30OPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test31OPlayerShouldNotMoveWhenIsXTurn stamp: 'FC 10/31/2020 18:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test32OPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test33OPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:44:34'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:45:05' prior: 50909705!
validateMoveFrom: aPointSource to: aPoint2

	(((aPoint2 dist: aPointSource) = 1) or: [aPoint2 = (2@2) or: [aPointSource = (2@2)]]) ifFalse: [ self error: self class invalidMoveMessage] .
	(self isOccupied: aPoint2) ifTrue: [self error: self class invalidMoveMessage ]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:45:37' prior: 50911777!
validateMoveFrom: aPointSource to: aPointDestiny

	(((aPointDestiny dist: aPointSource) = 1) or: [aPointDestiny = (2@2) or: [aPointSource = (2@2)]]) ifFalse: [ self error: self class invalidMoveMessage] .
	(self isOccupied: aPointDestiny) ifTrue: [self error: self class invalidMoveMessage ]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:45:45' prior: 50911384!
moveXWhenValidFrom: aPointSource to: aPoint2 
	
	self validateMoveFrom: aPointSource to: aPoint2.
	(self isXAt: aPointSource) ifFalse: [self error: self class invalidMoveMessage ].
		
	xTokens remove: aPointSource. 
	xTokens add: aPoint2.
	
	self hasPlayerXWon 
	ifTrue: 
		[ state := GameOverState for: self] 
	ifFalse: 
		[state := OMovingState for: self.		]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:45:53' prior: 50911802!
moveXWhenValidFrom: aPointSource to: aPointDestiny 
	
	self validateMoveFrom: aPointSource to: aPointDestiny.
	(self isXAt: aPointSource) ifFalse: [self error: self class invalidMoveMessage ].
		
	xTokens remove: aPointSource. 
	xTokens add: aPointDestiny.
	
	self hasPlayerXWon 
	ifTrue: 
		[ state := GameOverState for: self] 
	ifFalse: 
		[state := OMovingState for: self.		]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:46:15' prior: 50908870!
moveXFrom: aPointSource to: aPoint2 
	
	state moveXFrom: aPointSource to: aPoint2.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:46:19' prior: 50911832!
moveXFrom: aPointSource to: aPointDestiny 
	
	state moveXFrom: aPointSource to: aPointDestiny.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:46:39' prior: 50911398!
moveOWhenValidFrom: aPointSource to: aPointDestiny 
	
	self validateMoveFrom: aPointSource to: aPointDestiny.
	(self isOAt: aPointSource) ifFalse: [self error: self class invalidMoveMessage ].
		
	oTokens remove: aPointSource. 
	oTokens add: aPointDestiny.
	
	self hasPlayerOWon 
	ifTrue: 
		[ state := GameOverState for: self] 
	ifFalse: 
		[state := XMovingState for: self.		]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:46:46' prior: 50909823!
moveOFrom: aPointSource to: aPoint2 
	
	state moveOFrom: aPointSource to: aPoint2.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:46:51' prior: 50911860!
moveOFrom: aPointSource to: aPointDestiny 
	
	state moveOFrom: aPointSource to: aPointDestiny.! !

!methodRemoval: OTurnState #moveOFrom:to: stamp: 'FC 10/31/2020 18:47:07'!
moveOFrom: aPoint to: aPoint2 
	game moveOWhenValidFrom: aPoint  to: aPoint2. !

!methodRemoval: OTurnState #putOAt: stamp: 'FC 10/31/2020 18:47:09'!
putOAt: aPoint
	game putOAtWhenValid: aPoint.!

!methodRemoval: XTurnState #putOAt: stamp: 'FC 10/31/2020 18:47:18'!
putOAt: aPoint
	self error: TerniLapilli invalidMoveMessage.!

!methodRemoval: XTurnState #moveOFrom:to: stamp: 'FC 10/31/2020 18:47:20'!
moveOFrom: aPoint to: aPoint2 
	self error: TerniLapilli invalidMoveMessage.!
!XTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:48:03'!
moveOFrom: aPoint to: aPoint2 
	self error: TerniLapilli invalidMoveMessage.! !
!XTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:48:13'!
putOAt: aPoint 
	self error: TerniLapilli invalidMoveMessage.! !

!methodRemoval: XTurnState #putXAt: stamp: 'FC 10/31/2020 18:48:17'!
putXAt: aPoint
	game putXAtWhenValid: aPoint.!

!methodRemoval: XTurnState #moveXFrom:to: stamp: 'FC 10/31/2020 18:48:18'!
moveXFrom: aPoint to: aPoint2 
	game moveXWhenValidFrom: aPoint  to: aPoint2. !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 18:48:21'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 18:48:21'!
ERROR!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 18:48:21'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 18:48:21'!
ERROR!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 18:48:21'!
ERROR!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:48:21'!
ERROR!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:48:21'!
ERROR!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:48:21'!
ERROR!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:48:21'!
ERROR!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 18:48:21'!
FAILURE!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 18:48:21'!
ERROR!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:48:21'!
ERROR!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:48:21'!
ERROR!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:48:21'!
ERROR!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:48:21'!
ERROR!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:48:21'!
ERROR!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:48:21'!
ERROR!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 18:48:21'!
ERROR!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 18:48:21'!
ERROR!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:48:21'!
ERROR!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:48:21'!
ERROR!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:48:21'!
ERROR!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 18:48:21'!
ERROR!

!testRun: #TerniLapilliTest #test26XPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:48:21'!
ERROR!

!testRun: #TerniLapilliTest #test27XPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:48:21'!
ERROR!

!testRun: #TerniLapilliTest #test28OPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:48:21'!
ERROR!

!testRun: #TerniLapilliTest #test29OPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:48:21'!
ERROR!

!testRun: #TerniLapilliTest #test30OPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:48:21'!
ERROR!

!testRun: #TerniLapilliTest #test31OPlayerShouldNotMoveWhenIsXTurn stamp: 'FC 10/31/2020 18:48:21'!
ERROR!

!testRun: #TerniLapilliTest #test32OPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:48:21'!
ERROR!

!testRun: #TerniLapilliTest #test33OPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:48:21'!
ERROR!
!TerniLapilli methodsFor: 'initialization' stamp: 'FC 10/31/2020 18:48:49' prior: 50908573 overrides: 16896425!
initialize 
	xTokens := OrderedCollection new.
	oTokens := OrderedCollection new.
	state := XPlacingState for: self.! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 18:48:50'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 18:48:50'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 18:48:50'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 18:48:50'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 18:48:50'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:48:50'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:48:50'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:48:50'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:48:50'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 18:48:50'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 18:48:50'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:48:50'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:48:50'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:48:50'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:48:50'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:48:50'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:48:50'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 18:48:50'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 18:48:50'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:48:50'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:48:50'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:48:50'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 18:48:50'!
PASSED!

!testRun: #TerniLapilliTest #test26XPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:48:50'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:48:50'!
PASSED!

!testRun: #TerniLapilliTest #test28OPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:48:51'!
PASSED!

!testRun: #TerniLapilliTest #test29OPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:48:51'!
PASSED!

!testRun: #TerniLapilliTest #test30OPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:48:51'!
PASSED!

!testRun: #TerniLapilliTest #test31OPlayerShouldNotMoveWhenIsXTurn stamp: 'FC 10/31/2020 18:48:51'!
PASSED!

!testRun: #TerniLapilliTest #test32OPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:48:51'!
PASSED!

!testRun: #TerniLapilliTest #test33OPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:48:51'!
PASSED!
!XTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:49:24' prior: 50911889!
moveOFrom: aPointSource to: aPoint2 
	self error: TerniLapilli invalidMoveMessage.! !
!XTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:49:29' prior: 50912131!
moveOFrom: aPointSource to: aPointDestiny 
	self error: TerniLapilli invalidMoveMessage.! !
!OTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:49:41' prior: 50908915!
moveXFrom: aPointSource to: aPoint2 
	self error: TerniLapilli invalidMoveMessage.! !
!OTurnState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:49:46' prior: 50912143!
moveXFrom: aPointSource to: aPointDestiny 
	self error: TerniLapilli invalidMoveMessage.! !
!OMovingState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:50:16' prior: 50911007!
moveOFrom: aPointSource to: aPoint2 
	game moveOWhenValidFrom: aPointSource  to: aPoint2. ! !
!OMovingState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:50:22' prior: 50912155!
moveOFrom: aPointSource to: aPointDestiny 
	game moveOWhenValidFrom: aPointSource  to: aPointDestiny. ! !
!OPlacingState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:50:30' prior: 50911062!
moveOFrom: aPointSource to: aPoint2 
	self error: TerniLapilli invalidMoveMessage.! !
!OPlacingState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:50:33' prior: 50912168!
moveOFrom: aPointSource to: aPointDestiny 
	self error: TerniLapilli invalidMoveMessage.! !
!XMovingState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:50:42' prior: 50911084!
moveXFrom: aPointSource to: aPoint2 
	game moveXWhenValidFrom: aPointSource  to: aPoint2. ! !
!XMovingState methodsFor: 'as yet unclassified' stamp: 'FC 10/31/2020 18:50:47' prior: 50912180!
moveXFrom: aPointSource to: aPointDestiny 
	game moveXWhenValidFrom: aPointSource  to: aPointDestiny. ! !
!TerniLapilli methodsFor: 'testing - private' stamp: 'FC 10/31/2020 18:53:10' prior: 50904047!
hasOWinningColumn

	^(1 to: 3) anySatisfy: [ :colNumber | (self isOAt: 1@colNumber) and: [ (self isOAt: 2@colNumber) and: [ self isOAt: 3@colNumber ] ] ].! !
!TerniLapilli methodsFor: 'testing - private' stamp: 'FC 10/31/2020 18:53:55' prior: 50911373!
validatePlacement: aPoint for: tokens

	(self isValidPosition: aPoint) ifFalse: [ self error: self class outOfBoundsMoveMessage ]. 
	(self isOccupied: aPoint) ifTrue: [ 		self error: self class invalidMoveMessage. ].
! !
!TerniLapilli methodsFor: 'movements' stamp: 'FC 10/31/2020 18:54:17' prior: 50911126!
putOAtWhenValid: aPoint 

	self validatePlacement: aPoint for: oTokens. 
	oTokens add: aPoint.
	self hasPlayerOWon 
	ifTrue: 
		[ state := GameOverState for: self] 
	ifFalse: 
		[	xTokens size < 3 ifTrue: [
				state := XPlacingState for: self.		
			] ifFalse: [
				state := XMovingState for: self.
			]
		]! !
!TerniLapilli methodsFor: 'movements' stamp: 'FC 10/31/2020 18:54:28' prior: 50911114!
putXAtWhenValid: aPoint 

	self validatePlacement: aPoint for: xTokens.
	xTokens add: aPoint.
	self hasPlayerXWon 
	ifTrue: 
		[ state := GameOverState for: self] 
	ifFalse: 
		[	oTokens size < 3 ifTrue: [
				state := OPlacingState for: self.		
			] ifFalse: [
				state := OMovingState for: self.
			]
		]! !

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 18:54:29'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 18:54:29'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 18:54:29'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 18:54:29'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 18:54:29'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:54:29'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 18:54:29'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:54:29'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 18:54:29'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 18:54:29'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 18:54:29'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:54:29'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 18:54:29'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:54:29'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 18:54:29'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:54:29'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 18:54:29'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 18:54:30'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 18:54:30'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:54:30'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:54:30'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:54:30'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 18:54:30'!
PASSED!

!testRun: #TerniLapilliTest #test26XPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:54:30'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:54:30'!
PASSED!

!testRun: #TerniLapilliTest #test28OPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 18:54:30'!
PASSED!

!testRun: #TerniLapilliTest #test29OPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 18:54:30'!
PASSED!

!testRun: #TerniLapilliTest #test30OPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 18:54:30'!
PASSED!

!testRun: #TerniLapilliTest #test31OPlayerShouldNotMoveWhenIsXTurn stamp: 'FC 10/31/2020 18:54:30'!
PASSED!

!testRun: #TerniLapilliTest #test32OPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 18:54:30'!
PASSED!

!testRun: #TerniLapilliTest #test33OPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 18:54:30'!
PASSED!

!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'FC 10/31/2020 18:58:39'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: 'game2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliTest methodsFor: 'setUp/tearDown' stamp: 'FC 10/31/2020 18:58:37' overrides: 16927572!
setUp
	game2 := TerniLapilli new.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'FC 10/31/2020 18:58:51' prior: 50902022!
test01PlayerXShouldStart
	
	self assert: game2 isPlayingX.
	! !

TestCase subclass: #TerniLapilliTest
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TestCase subclass: #TerniLapilliTest
	instanceVariableNames: 'game2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'FC 10/31/2020 18:59:14'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: 'game2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliTest methodsFor: 'tests' stamp: 'FC 10/31/2020 19:00:21' prior: 50912357!
test01PlayerXShouldStart
	| game |
	
	game := TerniLapilli new.
	self assert: game isPlayingX.
	! !

!methodRemoval: TerniLapilliTest #setUp stamp: 'FC 10/31/2020 19:00:25'!
setUp
	game2 := TerniLapilli new.!

TestCase subclass: #TerniLapilliTest
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'FC 10/31/2020 19:00:34'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test26XPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test28OPlayerShouldMoveCorrectly stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test29OPlayerShouldNotMoveInvalidToken stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test30OPlayerShouldNotOverlapTokens stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test31OPlayerShouldNotMoveWhenIsXTurn stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test32OPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

!testRun: #TerniLapilliTest #test33OPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 10/31/2020 19:00:36'!
PASSED!

----SNAPSHOT----(31 October 2020 19:00:54) CuisUniversity-4383.image priorSource: 18488807!

----SNAPSHOT----(31 October 2020 19:01:59) CuisUniversity-4383.image priorSource: 18587576!